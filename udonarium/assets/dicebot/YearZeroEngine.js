/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$setPrefixes', '$match', '$dice_info_init', '$to_i', '$[]', '$make_dice_roll', '$+', '$-', '$make_result_text', '$==', '$make_result_with_yze', '$make_result_with_myz', '$>', '$>=', '$roll', '$each', '$split']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'YearZeroEngine');

    var $nesting = [self].concat($parent_nesting), $YearZeroEngine_dice_info_init$1, $YearZeroEngine_rollDiceCommand$2, $YearZeroEngine_make_result_text$3, $YearZeroEngine_make_result_with_yze$4, $YearZeroEngine_make_result_with_myz$5, $YearZeroEngine_make_dice_roll$6;

    self.$$prototype.total_success_dice = self.$$prototype.total_botch_dice = self.$$prototype.base_botch_dice = self.$$prototype.push_dice = self.$$prototype.skill_botch_dice = self.$$prototype.gear_botch_dice = self.$$prototype.difficulty = nil;
    
    Opal.const_set($nesting[0], 'ID', "YearZeroEngine");
    Opal.const_set($nesting[0], 'NAME', "YearZeroEngine");
    Opal.const_set($nesting[0], 'SORT_KEY', "いやあせろえんしん");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定コマンド(nYZEx+x+x)\n" + "  (難易度)YZE(能力ダイス数)+(技能ダイス数)+(アイテムダイス数)  # (6のみを数える)\n" + "\n" + "・判定コマンド(nMYZx+x+x)\n" + "  (難易度)MYZ(能力ダイス数)+(技能ダイス数)+(アイテムダイス数)  # (1と6を数え、プッシュ可能数を表示)\n" + "\n" + "  ※ 難易度と技能、アイテムダイス数は省略可能\n");
    Opal.const_set($nesting[0], 'DIFFICULTY_INDEX', 1);
    Opal.const_set($nesting[0], 'COMMAND_TYPE_INDEX', 2);
    Opal.const_set($nesting[0], 'ABILITY_INDEX', 3);
    Opal.const_set($nesting[0], 'SKILL_INDEX', 5);
    Opal.const_set($nesting[0], 'MODIFIED_INDEX', 7);
    self.$setPrefixes(["(\\d+)?(YZE|MYZ).*"]);
    
    Opal.def(self, '$dice_info_init', $YearZeroEngine_dice_info_init$1 = function $$dice_info_init() {
      var self = this;

      
      self.total_success_dice = 0;
      self.total_botch_dice = 0;
      self.base_botch_dice = 0;
      self.skill_botch_dice = 0;
      self.gear_botch_dice = 0;
      self.push_dice = 0;
      return (self.difficulty = 0);
    }, $YearZeroEngine_dice_info_init$1.$$arity = 0);
    
    Opal.def(self, '$rollDiceCommand', $YearZeroEngine_rollDiceCommand$2 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, m = nil, command_type = nil, dice_pool = nil, ability_dice_text = nil, success_dice = nil, botch_dice = nil, dice_count_text = nil, dice_text = nil, skill_dice_text = nil, modified_dice_text = nil;

      
      m = /^(\d+)?(YZE|MYZ)(\d+)(\+(\d+))?(\+(\d+))?/.$match(command);
      if ($truthy(m)) {
      } else {
        return ""
      };
      self.$dice_info_init();
      self.difficulty = m['$[]']($$($nesting, 'DIFFICULTY_INDEX')).$to_i();
      command_type = m['$[]']($$($nesting, 'COMMAND_TYPE_INDEX'));
      self.total_success_dice = 0;
      dice_pool = m['$[]']($$($nesting, 'ABILITY_INDEX')).$to_i();
      $b = self.$make_dice_roll(dice_pool), $a = Opal.to_ary($b), (ability_dice_text = ($a[0] == null ? nil : $a[0])), (success_dice = ($a[1] == null ? nil : $a[1])), (botch_dice = ($a[2] == null ? nil : $a[2])), $b;
      self.total_success_dice = $rb_plus(self.total_success_dice, success_dice);
      self.total_botch_dice = $rb_plus(self.total_botch_dice, botch_dice);
      self.base_botch_dice = $rb_plus(self.base_botch_dice, botch_dice);
      self.push_dice = $rb_plus(self.push_dice, $rb_minus(dice_pool, $rb_plus(success_dice, botch_dice)));
      dice_count_text = "" + "(" + (dice_pool) + "D6)";
      dice_text = ability_dice_text;
      if ($truthy(m['$[]']($$($nesting, 'SKILL_INDEX')))) {
        
        dice_pool = m['$[]']($$($nesting, 'SKILL_INDEX')).$to_i();
        $b = self.$make_dice_roll(dice_pool), $a = Opal.to_ary($b), (skill_dice_text = ($a[0] == null ? nil : $a[0])), (success_dice = ($a[1] == null ? nil : $a[1])), (botch_dice = ($a[2] == null ? nil : $a[2])), $b;
        self.total_success_dice = $rb_plus(self.total_success_dice, success_dice);
        self.total_botch_dice = $rb_plus(self.total_botch_dice, botch_dice);
        self.skill_botch_dice = $rb_plus(self.skill_botch_dice, botch_dice);
        self.push_dice = $rb_plus(self.push_dice, $rb_minus(dice_pool, success_dice));
        dice_count_text = $rb_plus(dice_count_text, "" + "+(" + (dice_pool) + "D6)");
        dice_text = $rb_plus(dice_text, "" + "+" + (skill_dice_text));};
      if ($truthy(m['$[]']($$($nesting, 'MODIFIED_INDEX')))) {
        
        dice_pool = m['$[]']($$($nesting, 'MODIFIED_INDEX')).$to_i();
        $b = self.$make_dice_roll(dice_pool), $a = Opal.to_ary($b), (modified_dice_text = ($a[0] == null ? nil : $a[0])), (success_dice = ($a[1] == null ? nil : $a[1])), (botch_dice = ($a[2] == null ? nil : $a[2])), $b;
        self.total_success_dice = $rb_plus(self.total_success_dice, success_dice);
        self.total_botch_dice = $rb_plus(self.total_botch_dice, botch_dice);
        self.gear_botch_dice = $rb_plus(self.gear_botch_dice, botch_dice);
        self.push_dice = $rb_plus(self.push_dice, $rb_minus(dice_pool, $rb_plus(success_dice, botch_dice)));
        dice_count_text = $rb_plus(dice_count_text, "" + "+(" + (dice_pool) + "D6)");
        dice_text = $rb_plus(dice_text, "" + "+" + (modified_dice_text));};
      return self.$make_result_text(command_type, dice_count_text, dice_text);
    }, $YearZeroEngine_rollDiceCommand$2.$$arity = 1);
    
    Opal.def(self, '$make_result_text', $YearZeroEngine_make_result_text$3 = function $$make_result_text(command_type, dice_count_text, dice_text) {
      var self = this;

      
      if (command_type['$==']("YZE")) {
        return self.$make_result_with_yze(dice_count_text, dice_text)
      } else if (command_type['$==']("MYZ")) {
        return self.$make_result_with_myz(dice_count_text, dice_text)};
      return "Error";
    }, $YearZeroEngine_make_result_text$3.$$arity = 3);
    
    Opal.def(self, '$make_result_with_yze', $YearZeroEngine_make_result_with_yze$4 = function $$make_result_with_yze(dice_count_text, dice_text) {
      var self = this, result_text = nil;

      
      result_text = "" + (dice_count_text) + " ＞ " + (dice_text) + " 成功数:" + (self.total_success_dice);
      if ($truthy($rb_gt(self.difficulty, 0))) {
        if ($truthy($rb_ge(self.total_success_dice, self.difficulty))) {
          result_text = "" + (result_text) + " 難易度=" + (self.difficulty) + ":判定成功！"
        } else {
          result_text = "" + (result_text) + " 難易度=" + (self.difficulty) + ":判定失敗！"
        }};
      return result_text;
    }, $YearZeroEngine_make_result_with_yze$4.$$arity = 2);
    
    Opal.def(self, '$make_result_with_myz', $YearZeroEngine_make_result_with_myz$5 = function $$make_result_with_myz(dice_count_text, dice_text) {
      var self = this, result_text = nil;

      
      result_text = self.$make_result_with_yze(dice_count_text, dice_text);
      return "" + (result_text) + "\n出目1：[能力：" + (self.base_botch_dice) + ",技能：" + (self.skill_botch_dice) + ",アイテム：" + (self.gear_botch_dice) + ") プッシュ可能=" + (self.push_dice) + "ダイス";
    }, $YearZeroEngine_make_result_with_myz$5.$$arity = 2);
    return (Opal.def(self, '$make_dice_roll', $YearZeroEngine_make_dice_roll$6 = function $$make_dice_roll(dice_pool) {
      var $a, $b, $$7, self = this, botch_dice = nil, success_dice = nil, _ = nil, dice_text = nil;

      
      botch_dice = 0;
      success_dice = 0;
      $b = self.$roll(dice_pool, 6), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (dice_text = ($a[1] == null ? nil : $a[1])), $b;
      $send(dice_text.$split(","), 'each', [], ($$7 = function(take_dice){var self = $$7.$$s || this;

      
        
        if (take_dice == null) {
          take_dice = nil;
        };
        if (take_dice['$==']("6")) {
          return (success_dice = $rb_plus(success_dice, 1))
        } else if (take_dice['$==']("1")) {
          return (botch_dice = $rb_plus(botch_dice, 1))
        } else {
          return nil
        };}, $$7.$$s = self, $$7.$$arity = 1, $$7));
      return ["" + "[" + (dice_text) + "]", success_dice, botch_dice];
    }, $YearZeroEngine_make_dice_roll$6.$$arity = 1), nil) && 'make_dice_roll';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
