/* Generated by Opal 1.0.3 */
Opal.modules["utils/range_table"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$alias_method', '$freeze', '$lambda', '$name', '$sum', '$content', '$attr_reader', '$match', '$raise', '$to_i', '$[]', '$store', '$find', '$include?', '$range', '$roll', '$map', '$split', '$to_proc', '$fetch', '$formatted=', '$-', '$private', '$coerce_to_int_range', '$sort_by', '$min', '$assert_min_sum_is_covered', '$assert_max_sum_is_covered', '$assert_no_gap_or_overlap_in_ranges', '$===', '$is_a?', '$begin', '$end', '$class', '$first', '$*', '$last', '$each_cons', '$max', '$+']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RangeTable');

    var $nesting = [self].concat($parent_nesting), $RangeTable$1, $RangeTable$2, $RangeTable_initialize$3, $RangeTable_fetch$4, $RangeTable_roll$6, $RangeTable_store$7, $RangeTable_coerce_to_int_range$11, $RangeTable_assert_min_sum_is_covered$12, $RangeTable_assert_max_sum_is_covered$13, $RangeTable_assert_no_gap_or_overlap_in_ranges$14;

    self.$$prototype.name = self.$$prototype.items = self.$$prototype.num_of_dice = self.$$prototype.num_of_sides = self.$$prototype.formatter = nil;
    
    Opal.const_set($nesting[0], 'RollResult', $send($$($nesting, 'Struct'), 'new', ["sum", "values", "content", "formatted"], ($RangeTable$1 = function(){var self = $RangeTable$1.$$s || this;

    return self.$alias_method("to_s", "formatted")}, $RangeTable$1.$$s = self, $RangeTable$1.$$arity = 0, $RangeTable$1)));
    Opal.const_set($nesting[0], 'Item', $$($nesting, 'Struct').$new("range", "content"));
    Opal.const_set($nesting[0], 'DICE_ROLL_METHOD_RE', /^(\d+)D(\d+)$/i.$freeze());
    Opal.const_set($nesting[0], 'DEFAULT_FORMATTER', $send(self, 'lambda', [], ($RangeTable$2 = function(table, result){var self = $RangeTable$2.$$s || this;

    
      
      if (table == null) {
        table = nil;
      };
      
      if (result == null) {
        result = nil;
      };
      return "" + (table.$name()) + "(" + (result.$sum()) + ") ＞ " + (result.$content());}, $RangeTable$2.$$s = self, $RangeTable$2.$$arity = 2, $RangeTable$2)));
    self.$attr_reader("name");
    self.$attr_reader("num_of_dice");
    self.$attr_reader("num_of_sides");
    
    Opal.def(self, '$initialize', $RangeTable_initialize$3 = function $$initialize(name, dice_roll_method, items) {
      var $iter = $RangeTable_initialize$3.$$p, formatter = $iter || nil, $a, self = this, m = nil;

      if ($iter) $RangeTable_initialize$3.$$p = null;
      
      
      if ($iter) $RangeTable_initialize$3.$$p = null;;
      self.name = name.$freeze();
      self.formatter = ($truthy($a = formatter) ? $a : $$($nesting, 'DEFAULT_FORMATTER'));
      m = $$($nesting, 'DICE_ROLL_METHOD_RE').$match(dice_roll_method);
      if ($truthy(m)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + (self.name) + ": invalid dice roll method: " + (dice_roll_method))
      };
      self.num_of_dice = m['$[]'](1).$to_i();
      self.num_of_sides = m['$[]'](2).$to_i();
      return self.$store(items);
    }, $RangeTable_initialize$3.$$arity = 3);
    
    Opal.def(self, '$fetch', $RangeTable_fetch$4 = function $$fetch(value) {
      var $$5, self = this, item = nil;

      
      item = $send(self.items, 'find', [], ($$5 = function(i){var self = $$5.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i.$range()['$include?'](value);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
      if ($truthy(item)) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + (self.name) + ": value is out of range: " + (value))
      };
      return item;
    }, $RangeTable_fetch$4.$$arity = 1);
    
    Opal.def(self, '$roll', $RangeTable_roll$6 = function $$roll(bcdice) {
      var $a, $b, self = this, sum = nil, values_str = nil, values = nil, result = nil, $writer = nil;

      
      $b = bcdice.$roll(self.num_of_dice, self.num_of_sides), $a = Opal.to_ary($b), (sum = ($a[0] == null ? nil : $a[0])), (values_str = ($a[1] == null ? nil : $a[1])), $b;
      values = $send(values_str.$split(","), 'map', [], "to_i".$to_proc());
      result = $$($nesting, 'RollResult').$new(sum, values, self.$fetch(sum).$content());
      
      $writer = [self.formatter['$[]'](self, result)];
      $send(result, 'formatted=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return result;
    }, $RangeTable_roll$6.$$arity = 1);
    self.$private();
    
    Opal.def(self, '$store', $RangeTable_store$7 = function $$store(items) {
      var $$8, $$9, $$10, self = this, items_with_range = nil, sorted_items = nil;

      
      items_with_range = $send(items, 'map', [], ($$8 = function(r, c){var self = $$8.$$s || this;

      
        
        if (r == null) {
          r = nil;
        };
        
        if (c == null) {
          c = nil;
        };
        return [self.$coerce_to_int_range(r), c];}, $$8.$$s = self, $$8.$$arity = 2, $$8));
      sorted_items = $send(items_with_range, 'sort_by', [], ($$9 = function(r, _){var self = $$9.$$s || this;

      
        
        if (r == null) {
          r = nil;
        };
        
        if (_ == null) {
          _ = nil;
        };
        return r.$min();}, $$9.$$s = self, $$9.$$arity = 2, $$9));
      self.$assert_min_sum_is_covered(sorted_items);
      self.$assert_max_sum_is_covered(sorted_items);
      self.$assert_no_gap_or_overlap_in_ranges(sorted_items);
      self.items = $send(sorted_items, 'map', [], ($$10 = function(range, content){var self = $$10.$$s || this;

      
        
        if (range == null) {
          range = nil;
        };
        
        if (content == null) {
          content = nil;
        };
        return $$($nesting, 'Item').$new(range, content.$freeze()).$freeze();}, $$10.$$s = self, $$10.$$arity = 2, $$10)).$freeze();
      return self;
    }, $RangeTable_store$7.$$arity = 1);
    
    Opal.def(self, '$coerce_to_int_range', $RangeTable_coerce_to_int_range$11 = function $$coerce_to_int_range(x) {
      var $a, self = this, $case = nil;

      
      $case = x;
      if ($$($nesting, 'Integer')['$===']($case)) {return $$($nesting, 'Range').$new(x, x)}
      else if ($$($nesting, 'Range')['$===']($case)) {if ($truthy(($truthy($a = x.$begin()['$is_a?']($$($nesting, 'Integer'))) ? x.$end()['$is_a?']($$($nesting, 'Integer')) : $a))) {
        return x}};
      return self.$raise($$($nesting, 'TypeError'), "" + (self.name) + ": " + (x) + " (" + (x.$class()) + ") must be an Integer or a Range with Integers ");
    }, $RangeTable_coerce_to_int_range$11.$$arity = 1);
    
    Opal.def(self, '$assert_min_sum_is_covered', $RangeTable_assert_min_sum_is_covered$12 = function $$assert_min_sum_is_covered(sorted_items) {
      var self = this, min_sum = nil, range = nil;

      
      min_sum = self.num_of_dice;
      range = sorted_items.$first()['$[]'](0);
      if ($truthy(range['$include?'](min_sum))) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + (self.name) + ": min value (" + (min_sum) + ") is not covered: " + (range))
      };
      return self;
    }, $RangeTable_assert_min_sum_is_covered$12.$$arity = 1);
    
    Opal.def(self, '$assert_max_sum_is_covered', $RangeTable_assert_max_sum_is_covered$13 = function $$assert_max_sum_is_covered(sorted_items) {
      var self = this, max_sum = nil, range = nil;

      
      max_sum = $rb_times(self.num_of_dice, self.num_of_sides);
      range = sorted_items.$last()['$[]'](0);
      if ($truthy(range['$include?'](max_sum))) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + (self.name) + ": max value (" + (max_sum) + ") is not covered: " + (range))
      };
      return self;
    }, $RangeTable_assert_max_sum_is_covered$13.$$arity = 1);
    return (Opal.def(self, '$assert_no_gap_or_overlap_in_ranges', $RangeTable_assert_no_gap_or_overlap_in_ranges$14 = function $$assert_no_gap_or_overlap_in_ranges(sorted_items) {
      var $$15, self = this;

      
      $send(sorted_items, 'each_cons', [2], ($$15 = function(i1, i2){var self = $$15.$$s || this, r1 = nil, r2 = nil, max1 = nil, next_of_max1 = nil;
        if (self.name == null) self.name = nil;

      
        
        if (i1 == null) {
          i1 = nil;
        };
        
        if (i2 == null) {
          i2 = nil;
        };
        r1 = i1['$[]'](0);
        r2 = i2['$[]'](0);
        max1 = r1.$max();
        next_of_max1 = $rb_plus(max1, 1);
        if ($truthy(r2['$include?'](max1))) {
          self.$raise($$($nesting, 'RangeError'), "" + (self.name) + ": Range overlap: " + (r1) + " and " + (r2))};
        if ($truthy(r2['$include?'](next_of_max1))) {
          return nil
        } else {
          return self.$raise($$($nesting, 'RangeError'), "" + (self.name) + ": Range gap: " + (r1) + " and " + (r2))
        };}, $$15.$$s = self, $$15.$$arity = 2, $$15));
      return self;
    }, $RangeTable_assert_no_gap_or_overlap_in_ranges$14.$$arity = 1), nil) && 'assert_no_gap_or_overlap_in_ranges';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$require', '$setPrefixes', '$===', '$resolute_action', '$roll_death_chart', '$roll_hero_name_chart', '$roll_tables', '$private', '$match', '$eval', '$new', '$[]', '$roll_d100', '$format', '$action_result', '$to_s', '$join', '$freeze', '$+', '$==', '$<=', '$-', '$roll', '$*', '$!=', '$size', '$raise', '$inspect', '$at', '$<', '$first', '$>', '$last', '$to_i', '$map', '$mix_column', '$zip', '$each', '$push', '$sub', '$gsub']);
  
  self.$require("utils/range_table");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'DeadlineHeroes');

    var $nesting = [self].concat($parent_nesting), $DeadlineHeroes_rollDiceCommand$1, $DeadlineHeroes_resolute_action$2, $DeadlineHeroes_action_result$3, $DeadlineHeroes_roll_d100$4, $DeadlineHeroes_roll_death_chart$8, $DeadlineHeroes_roll_hero_name_chart$13;

    
    Opal.const_set($nesting[0], 'ID', "DeadlineHeroes");
    Opal.const_set($nesting[0], 'NAME', "デッドラインヒーローズRPG");
    Opal.const_set($nesting[0], 'SORT_KEY', "てつとらいんひいろおすRPG");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・行為判定（DLHx）\n" + "　x：成功率\n" + "　例）DLH80\n" + "　クリティカル、ファンブルの自動的判定を行います。\n" + "　「DLH50+20-30」のように加減算記述も可能。\n" + "　成功率は上限100％、下限０％\n" + "・デスチャート(DCxY)\n" + "　x：チャートの種類。肉体：DCL、精神：DCS、環境：DCC\n" + "　Y=マイナス値\n" + "　例）DCL5：ライフが -5 の判定\n" + "　　　DCS3：サニティーが -3 の判定\n" + "　　　DCC0：クレジット 0 の判定\n" + "・ヒーローネームチャート（HNC）\n" + "・リアルネームチャート　日本（RNCJ）、海外（RNCO）\n");
    self.$setPrefixes(["DLH\\d+([\\+\\-]\\d+)*", "DC(L|S|C)\\d+", "RNC[JO]", "HNC"]);
    
    Opal.def(self, '$rollDiceCommand', $DeadlineHeroes_rollDiceCommand$1 = function $$rollDiceCommand(command) {
      var self = this, $case = nil;

      return (function() {$case = command;
      if (/^DLH/i['$===']($case)) {return self.$resolute_action(command)}
      else if (/^DC\w/i['$===']($case)) {return self.$roll_death_chart(command)}
      else if ("HNC"['$===']($case)) {return self.$roll_hero_name_chart()}
      else {return self.$roll_tables(command, $$($nesting, 'TABLES'))}})()
    }, $DeadlineHeroes_rollDiceCommand$1.$$arity = 1);
    self.$private();
    
    Opal.def(self, '$resolute_action', $DeadlineHeroes_resolute_action$2 = function $$resolute_action(command) {
      var $a, $b, self = this, m = nil, success_rate = nil, roll_result = nil, dice10 = nil, dice01 = nil, roll_result_text = nil, result = nil, sequence = nil;

      
      m = /^DLH(\d+([\+\-]\d+)*)$/.$match(command);
      if ($truthy(m)) {
      } else {
        return nil
      };
      success_rate = $$($nesting, 'ArithmeticEvaluator').$new().$eval(m['$[]'](1));
      $b = self.$roll_d100(), $a = Opal.to_ary($b), (roll_result = ($a[0] == null ? nil : $a[0])), (dice10 = ($a[1] == null ? nil : $a[1])), (dice01 = ($a[2] == null ? nil : $a[2])), $b;
      roll_result_text = self.$format("%02d", roll_result);
      result = self.$action_result(roll_result, dice10, dice01, success_rate);
      sequence = ["" + "行為判定(成功率:" + (success_rate) + "％)", "" + "1D100[" + (dice10) + "," + (dice01) + "]=" + (roll_result_text), roll_result_text.$to_s(), result];
      return sequence.$join(" ＞ ");
    }, $DeadlineHeroes_resolute_action$2.$$arity = 1);
    Opal.const_set($nesting[0], 'SUCCESS_STR', "成功");
    Opal.const_set($nesting[0], 'FAILURE_STR', "失敗");
    Opal.const_set($nesting[0], 'CRITICAL_STR', $rb_plus($$($nesting, 'SUCCESS_STR'), " ＞ クリティカル！ パワーの代償１／２").$freeze());
    Opal.const_set($nesting[0], 'FUMBLE_STR', $rb_plus($$($nesting, 'FAILURE_STR'), " ＞ ファンブル！ パワーの代償２倍＆振り直し不可").$freeze());
    
    Opal.def(self, '$action_result', $DeadlineHeroes_action_result$3 = function $$action_result(total, tens, ones, success_rate) {
      var $a, self = this;

      if ($truthy(($truthy($a = total['$=='](100)) ? $a : $rb_le(success_rate, 0)))) {
        return $$($nesting, 'FUMBLE_STR')
      } else if ($truthy($rb_le(total, $rb_minus(success_rate, 100)))) {
        return $$($nesting, 'CRITICAL_STR')
      } else if (tens['$=='](ones)) {
        if ($truthy($rb_le(total, success_rate))) {
          return $$($nesting, 'CRITICAL_STR')
        } else {
          return $$($nesting, 'FUMBLE_STR')
        }
      } else if ($truthy($rb_le(total, success_rate))) {
        return $$($nesting, 'SUCCESS_STR')
      } else {
        return $$($nesting, 'FAILURE_STR')
      }
    }, $DeadlineHeroes_action_result$3.$$arity = 4);
    
    Opal.def(self, '$roll_d100', $DeadlineHeroes_roll_d100$4 = function $$roll_d100() {
      var $a, $b, self = this, dice10 = nil, dice01 = nil, roll_result = nil;

      
      $b = self.$roll(1, 10), $a = Opal.to_ary($b), (dice10 = ($a[0] == null ? nil : $a[0])), $b;
      if (dice10['$=='](10)) {
        dice10 = 0};
      $b = self.$roll(1, 10), $a = Opal.to_ary($b), (dice01 = ($a[0] == null ? nil : $a[0])), $b;
      if (dice01['$=='](10)) {
        dice01 = 0};
      roll_result = $rb_plus($rb_times(dice10, 10), dice01);
      if (roll_result['$=='](0)) {
        roll_result = 100};
      return [roll_result, dice10, dice01];
    }, $DeadlineHeroes_roll_d100$4.$$arity = 0);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'DeathChart');

      var $nesting = [self].concat($parent_nesting), $DeathChart_initialize$5, $DeathChart_roll$6, $DeathChart_at$7;

      self.$$prototype.chart = self.$$prototype.name = nil;
      
      
      Opal.def(self, '$initialize', $DeathChart_initialize$5 = function $$initialize(name, chart) {
        var self = this;

        
        self.name = name;
        self.chart = chart.$freeze();
        if ($truthy(self.chart.$size()['$!='](11))) {
          return self.$raise($$($nesting, 'ArgumentError'), "" + "unexpected chart size " + (name.$inspect()) + " (given " + (self.chart.$size()) + ", expected 11)")
        } else {
          return nil
        };
      }, $DeathChart_initialize$5.$$arity = 2);
      
      Opal.def(self, '$roll', $DeathChart_roll$6 = function $$roll(bot, minus_score) {
        var $a, $b, self = this, dice = nil, key_number = nil, key_text = nil, chosen = nil;

        
        $b = bot.$roll(1, 10), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), $b;
        key_number = $rb_plus(dice, minus_score);
        $b = self.$at(key_number), $a = Opal.to_ary($b), (key_text = ($a[0] == null ? nil : $a[0])), (chosen = ($a[1] == null ? nil : $a[1])), $b;
        return "" + "デスチャート（" + (self.name) + "）[マイナス値:" + (minus_score) + " + 1D10(->" + (dice) + ") = " + (key_number) + "] ＞ " + (key_text) + " ： " + (chosen);
      }, $DeathChart_roll$6.$$arity = 2);
      self.$private();
      return (Opal.def(self, '$at', $DeathChart_at$7 = function $$at(key_number) {
        var self = this;

        if ($truthy($rb_lt(key_number, 10))) {
          return ["10以下", self.chart.$first()]
        } else if ($truthy($rb_gt(key_number, 20))) {
          return ["20以上", self.chart.$last()]
        } else {
          return [key_number.$to_s(), self.chart['$[]']($rb_minus(key_number, 10))]
        }
      }, $DeathChart_at$7.$$arity = 1), nil) && 'at';
    })($nesting[0], null, $nesting);
    
    Opal.def(self, '$roll_death_chart', $DeadlineHeroes_roll_death_chart$8 = function $$roll_death_chart(command) {
      var self = this, m = nil, chart = nil, minus_score = nil;

      
      m = /^DC([LSC])(\d+)$/i.$match(command);
      if ($truthy(m)) {
      } else {
        return m
      };
      chart = $$($nesting, 'DEATH_CHARTS')['$[]'](m['$[]'](1));
      minus_score = m['$[]'](2).$to_i();
      return chart.$roll(self, minus_score);
    }, $DeadlineHeroes_roll_death_chart$8.$$arity = 1);
    Opal.const_set($nesting[0], 'DEATH_CHARTS', $hash2(["L", "S", "C"], {"L": $$($nesting, 'DeathChart').$new("肉体", ["何も無し。キミは奇跡的に一命を取り留めた。闘いは続く。", "激痛が走る。以後、イベント終了時まで、全ての判定の成功率－10％。", "キミは［硬直］ポイント２点を得る。［硬直］ポイントを所持している間、キミは「属性：妨害」のパワーを使用することができない。各ラウンド終了時、キミは所持している［硬直］ポイントを１点減らしてもよい。", "渾身の一撃!!　キミは〈生存〉判定を行なう。失敗した場合、［死亡］する。", "キミは［気絶］ポイント２点を得る。［気絶］ポイントを所持している間、キミはあらゆるパワーを使用できず、自身のターンを得ることもできない。各ラウンド終了時、キミは所持している［気絶］ポイントを１点減らしてもよい。", "以後、イベント終了時まで、全ての判定の成功率－20％。", "記録的一撃!!　キミは〈生存〉－20％の判定を行なう。失敗した場合、［死亡］する。", "キミは［瀕死］ポイント２点を得る。［瀕死］ポイントを所持している間、キミはあらゆるパワーを使用できず、自身のターンを得ることもできない。各ラウンド終了時、キミは所持している［瀕死］ポイントを１点を失う。全ての［瀕死］ポイントを失う前に戦闘が終了しなかった場合、キミは［死亡］する。", "叙事詩的一撃!!　キミは〈生存〉－30％の判定を行なう。失敗した場合、［死亡］する。", "以後、イベント終了時まで、全ての判定の成功率－30％。", "神話的一撃!!　キミは宙を舞って三回転ほどした後、地面に叩きつけられる。見るも無惨な姿。肉体は原型を留めていない（キミは［死亡］した）。"]), "S": $$($nesting, 'DeathChart').$new("精神", ["何も無し。キミは歯を食いしばってストレスに耐えた。", "以後、イベント終了時まで、全ての判定の成功率－10％。", "キミは［恐怖］ポイント２点を得る。［恐怖］ポイントを所持している間、キミは「属性：攻撃」のパワーを使用できない。各ラウンド終了時、キミは所持している［恐怖］ポイントを１点減らしてもよい。", "とても傷ついた。キミは〈意志〉判定を行なう。失敗した場合、［絶望］してＮＰＣとなる。", "キミは［気絶］ポイント２点を得る。［気絶］ポイントを所持している間、キミはあらゆるパワーを使用できず、自身のターンを得ることもできない。各ラウンド終了時、キミは所持している［気絶］ポイントを１点減らしてもよい。", "以後、イベント終了時まで、全ての判定の成功率－20％。", "信じるものに裏切られたような痛み。キミは〈意志〉－20％の判定を行なう。失敗した場合、［絶望］してＮＰＣとなる。", "キミは［混乱］ポイント２点を得る。［混乱］ポイントを所持している間、キミは本来味方であったキャラクターに対して、可能な限り最大の被害を与える様、行動し続ける。各ラウンド終了時、キミは所持している［混乱］ポイントを１点減らしてもよい。", "あまりに残酷な現実。キミは〈意志〉－30％の判定を行なう。失敗した場合、［絶望］してＮＰＣとなる。", "以後、イベント終了時まで、全ての判定の成功率－30％。", "宇宙開闢の理に触れるも、それは人類の認識限界を超える何かであった。キミは［絶望］し、以後ＮＰＣとなる。"]), "C": $$($nesting, 'DeathChart').$new("環境", ["何も無し。キミは黒い噂を握りつぶした。", "以後、イベント終了時まで、全ての判定の成功率－10％。", "ピンチ！　以後、イベント終了時まで、キミは《支援》を使用できない。", "裏切り!!　キミは〈経済〉判定を行なう。失敗した場合、キミはヒーローとしての名声を失い、［汚名］を受ける。", "以後、シナリオ終了時まで、代償にクレジットを消費するパワーを使用できない。", "キミの悪評は大変なもののようだ。協力者からの支援が打ち切られる。以後、シナリオ終了時まで、全ての判定の成功率－20％。", "信頼の失墜!!　キミは〈経済〉－20％の判定を行なう。失敗した場合、キミはヒーローとしての名声を失い、［汚名］を受ける。", "以後、シナリオ終了時まで、【環境】系の技能のレベルがすべて０となる。", "捏造報道!!　身の覚えのない犯罪への荷担が、スクープとして報道される。キミは〈経済〉－30％の判定を行なう。失敗した場合、キミはヒーローとしての名声を失い、［汚名］を受ける。", "以後、イベント終了時まで、全ての判定の成功率－30％。", "キミの名は史上最悪の汚点として永遠に歴史に刻まれる。もはやキミを信じる仲間はなく、キミを助ける社会もない。キミは［汚名］を受けた。"])}).$freeze());
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'RealNameChart');

      var $nesting = [self].concat($parent_nesting), $RealNameChart_initialize$9, $RealNameChart_mix_column$11;

      
      
      Opal.def(self, '$initialize', $RealNameChart_initialize$9 = function $$initialize(name, columns, chart) {
        var $$10, $iter = $RealNameChart_initialize$9.$$p, $yield = $iter || nil, self = this, items = nil;

        if ($iter) $RealNameChart_initialize$9.$$p = null;
        
        items = $send(chart, 'map', [], ($$10 = function(l){var self = $$10.$$s || this;

        
          
          if (l == null) {
            l = nil;
          };
          return self.$mix_column(columns, l);}, $$10.$$s = self, $$10.$$arity = 1, $$10));
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', $RealNameChart_initialize$9, false), [name, "1D100", items], null);
      }, $RealNameChart_initialize$9.$$arity = 3);
      self.$private();
      return (Opal.def(self, '$mix_column', $RealNameChart_mix_column$11 = function $$mix_column(columns, item) {
        var $a, $b, $$12, self = this, range = nil, names = nil, candidate = nil;

        
        $b = item, $a = Opal.to_ary($b), (range = ($a[0] == null ? nil : $a[0])), (names = ($a[1] == null ? nil : $a[1])), $b;
        if (names.$size()['$=='](1)) {
          return [range, names['$[]'](0)]};
        candidate = $send(columns.$zip(names), 'map', [], ($$12 = function(l){var self = $$12.$$s || this;

        
          
          if (l == null) {
            l = nil;
          };
          return $rb_plus("\n", l.$join(": "));}, $$12.$$s = self, $$12.$$arity = 1, $$12)).$join("");
        return [range, candidate];
      }, $RealNameChart_mix_column$11.$$arity = 2), nil) && 'mix_column';
    })($nesting[0], $$($nesting, 'RangeTable'), $nesting);
    Opal.const_set($nesting[0], 'TABLES', $hash2(["RNCJ", "RNCO"], {"RNCJ": $$($nesting, 'RealNameChart').$new("リアルネームチャート（日本）", ["姓", "名（男）", "名（女）"], [[$range(1, 6, false), ["アイカワ／相川、愛川", "アキラ／晶、章", "アン／杏"]], [$range(7, 12, false), ["アマミヤ／雨宮", "エイジ／映司、英治", "イノリ／祈鈴、祈"]], [$range(13, 18, false), ["イブキ／伊吹", "カズキ／和希、一輝", "エマ／英真、恵茉"]], [$range(19, 24, false), ["オガミ／尾上", "ギンガ／銀河", "カノン／花音、観音"]], [$range(25, 30, false), ["カイ／甲斐", "ケンイチロウ／健一郎", "サラ／沙羅"]], [$range(31, 36, false), ["サカキ／榊、阪木", "ゴウ／豪、剛", "シズク／雫"]], [$range(37, 42, false), ["シシド／宍戸", "ジロー／次郎、治郎", "チズル／千鶴、千尋"]], [$range(43, 48, false), ["タチバナ／橘、立花", "タケシ／猛、武", "ナオミ／直美、尚美"]], [$range(49, 54, false), ["ツブラヤ／円谷", "ツバサ／翼", "ハル／華、波留"]], [$range(55, 60, false), ["ハヤカワ／早川", "テツ／鉄、哲", "ヒカル／光"]], [$range(61, 66, false), ["ハラダ／原田", "ヒデオ／英雄", "ベニ／紅"]], [$range(67, 72, false), ["フジカワ／藤川", "マサムネ／正宗、政宗", "マチ／真知、町"]], [$range(73, 78, false), ["ホシ／星", "ヤマト／大和", "ミア／深空、美杏"]], [$range(79, 84, false), ["ミゾグチ／溝口", "リュウセイ／流星", "ユリコ／由里子"]], [$range(85, 90, false), ["ヤシダ／矢志田", "レツ／烈、裂", "ルイ／瑠衣、涙"]], [$range(91, 96, false), ["ユウキ／結城", "レン／連、錬", "レナ／玲奈"]], [$range(97, 100, false), ["名無し（何らかの理由で名前を持たない、もしくは失った）"]]]), "RNCO": $$($nesting, 'RealNameChart').$new("リアルネームチャート（海外）", ["名（男）", "名（女）", "姓"], [[$range(1, 6, false), ["アルバス", "アイリス", "アレン"]], [$range(7, 12, false), ["クリス", "オリーブ", "ウォーケン"]], [$range(13, 18, false), ["サミュエル", "カーラ", "ウルフマン"]], [$range(19, 24, false), ["シドニー", "キルスティン", "オルセン"]], [$range(25, 30, false), ["スパイク", "グウェン", "カーター"]], [$range(31, 36, false), ["ダミアン", "サマンサ", "キャラダイン"]], [$range(37, 42, false), ["ディック", "ジャスティナ", "シーゲル"]], [$range(43, 48, false), ["デンゼル", "タバサ", "ジョーンズ"]], [$range(49, 54, false), ["ドン", "ナディン", "パーカー"]], [$range(55, 60, false), ["ニコラス", "ノエル", "フリーマン"]], [$range(61, 66, false), ["ネビル", "ハーリーン", "マーフィー"]], [$range(67, 72, false), ["バリ", "マルセラ", "ミラー"]], [$range(73, 78, false), ["ビリー", "ラナ", "ムーア"]], [$range(79, 84, false), ["ブルース", "リンジー", "リーヴ"]], [$range(85, 90, false), ["マーヴ", "ロザリー", "レイノルズ"]], [$range(91, 96, false), ["ライアン", "ワンダ", "ワード"]], [$range(97, 100, false), ["名無し（何らかの理由で名前を持たない、もしくは失った）"]]])}).$freeze());
    
    Opal.def(self, '$roll_hero_name_chart', $DeadlineHeroes_roll_hero_name_chart$13 = function $$roll_hero_name_chart() {
      var $a, $b, $$14, self = this, dice = nil, template = nil, template_result = nil, results = nil, elements = nil, hero_name = nil;

      
      $b = self.$roll(1, 10), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), $b;
      template = $$($nesting, 'HERO_NAME_TEMPLATES')['$[]']($rb_minus(dice, 1));
      template_result = "" + "ヒーローネームチャート(" + (dice) + ") ＞ " + (template['$[]']("text"));
      if (template['$[]']("text")['$==']("任意")) {
        return template_result};
      results = [template_result];
      elements = [];
      $send(template['$[]']("elements"), 'each', [], ($$14 = function(type){var self = $$14.$$s || this, $c, $d, base_chart = nil, result = nil, element = nil;

      
        
        if (type == null) {
          type = nil;
        };
        base_chart = $$($nesting, 'HERO_NAME_BASE_CHARTS')['$[]'](type);
        if ($truthy(base_chart)) {
        } else {
          
          elements.$push(type);
          return nil;;
        };
        $d = base_chart.$roll(self), $c = Opal.to_ary($d), (result = ($c[0] == null ? nil : $c[0])), (element = ($c[1] == null ? nil : $c[1])), $d;
        results.$push(result);
        return elements.$push(element);}, $$14.$$s = self, $$14.$$arity = 1, $$14));
      hero_name = elements.$join("").$gsub(/・{2,}/, "・").$sub(/・$/, "");
      results.$push("" + "ヒーローネーム ＞ " + (hero_name));
      return results.$join("\n");
    }, $DeadlineHeroes_roll_hero_name_chart$13.$$arity = 0);
    Opal.const_set($nesting[0], 'HERO_NAME_TEMPLATES', [$hash2(["text", "elements"], {"text": "ベースＡ＋ベースＡ", "elements": ["ベースＡ", "ベースＢ"]}), $hash2(["text", "elements"], {"text": "ベースＢ", "elements": ["ベースＢ"]}), $hash2(["text", "elements"], {"text": "ベースＢ×2回", "elements": ["ベースＢ", "ベースＢ"]}), $hash2(["text", "elements"], {"text": "ベースＢ＋ベースＣ", "elements": ["ベースＢ", "ベースＣ"]}), $hash2(["text", "elements"], {"text": "ベースＡ＋ベースＢ＋ベースＣ", "elements": ["ベースＡ", "ベースＢ", "ベースＣ"]}), $hash2(["text", "elements"], {"text": "ベースＡ＋ベースＢ×2回", "elements": ["ベースＡ", "ベースＢ", "ベースＢ"]}), $hash2(["text", "elements"], {"text": "ベースＢ×2回＋ベースＣ", "elements": ["ベースＢ", "ベースＢ", "ベースＣ"]}), $hash2(["text", "elements"], {"text": "（ベースＢ）・オブ・（ベースＢ）", "elements": ["ベースＢ", "・オブ・", "ベースＢ"]}), $hash2(["text", "elements"], {"text": "（ベースＢ）・ザ・（ベースＢ）", "elements": ["ベースＢ", "・ザ・", "ベースＢ"]}), $hash2(["text", "elements"], {"text": "任意", "elements": ["任意"]})].$freeze());
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HeroNameBaseChart');

      var $nesting = [self].concat($parent_nesting), $HeroNameBaseChart_initialize$15, $HeroNameBaseChart_roll$16;

      self.$$prototype.items = self.$$prototype.name = nil;
      
      
      Opal.def(self, '$initialize', $HeroNameBaseChart_initialize$15 = function $$initialize(name, items) {
        var self = this;

        
        self.name = name;
        return (self.items = items);
      }, $HeroNameBaseChart_initialize$15.$$arity = 2);
      return (Opal.def(self, '$roll', $HeroNameBaseChart_roll$16 = function $$roll(bot) {
        var $a, $b, self = this, dice = nil, chosen = nil, result = nil, m = nil, element_type = nil, element_chart = nil, element_result = nil;

        
        $b = bot.$roll(1, 10), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), $b;
        chosen = self.items['$[]']($rb_minus(dice, 1));
        result = "" + (self.name) + "(" + (dice) + ") ＞ " + (chosen);
        if ($truthy((m = chosen.$match(/^［(.+)］$/)))) {
          
          element_type = m['$[]'](1);
          element_chart = $$($nesting, 'HERO_NAME_ELEMENT_CHARTS')['$[]'](element_type);
          $b = element_chart.$roll(bot), $a = Opal.to_ary($b), (element_result = ($a[0] == null ? nil : $a[0])), (chosen = ($a[1] == null ? nil : $a[1])), $b;
          result = [result, element_result].$join(" ＞ ");};
        return [result, chosen];
      }, $HeroNameBaseChart_roll$16.$$arity = 1), nil) && 'roll';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'HeroNameElementChart');

      var $nesting = [self].concat($parent_nesting), $HeroNameElementChart_initialize$17, $HeroNameElementChart_roll$18;

      self.$$prototype.items = self.$$prototype.name = nil;
      
      
      Opal.def(self, '$initialize', $HeroNameElementChart_initialize$17 = function $$initialize(name, items) {
        var self = this;

        
        self.name = name;
        return (self.items = items);
      }, $HeroNameElementChart_initialize$17.$$arity = 2);
      return (Opal.def(self, '$roll', $HeroNameElementChart_roll$18 = function $$roll(bot) {
        var $a, $b, self = this, dice = nil, chosen = nil, result = nil;

        
        $b = bot.$roll(1, 10), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), $b;
        chosen = self.items['$[]']($rb_minus(dice, 1));
        result = "" + (self.name) + "(" + (dice) + ") ＞ " + (chosen['$[]']("element")) + " （意味：" + (chosen['$[]']("mean")) + "）";
        return [result, chosen['$[]']("element")];
      }, $HeroNameElementChart_roll$18.$$arity = 1), nil) && 'roll';
    })($nesting[0], null, $nesting);
    Opal.const_set($nesting[0], 'HERO_NAME_BASE_CHARTS', $hash2(["ベースＡ", "ベースＢ", "ベースＣ"], {"ベースＡ": $$($nesting, 'HeroNameBaseChart').$new("ベースＡ", ["ザ・", "キャプテン・", "ミスター／ミス／ミセス・", "ドクター／プロフェッサー・", "ロード／バロン／ジェネラル・", "マン・オブ・", "［強さ］", "［色］", "マダム／ミドル・", "数字（1～10）・"]), "ベースＢ": $$($nesting, 'HeroNameBaseChart').$new("ベースＢ", ["［神話／夢］", "［武器］", "［動物］", "［鳥］", "［虫／爬虫類］", "［部位］", "［光］", "［攻撃］", "［その他］", "数字（1～10）・"]), "ベースＣ": $$($nesting, 'HeroNameBaseChart').$new("ベースＣ", ["マン／ウーマン", "ボーイ／ガール", "マスク／フード", "ライダー", "マスター", "ファイター／ソルジャー", "キング／クイーン", "［色］", "ヒーロー／スペシャル", "ヒーロー／スペシャル"])}).$freeze());
    return Opal.const_set($nesting[0], 'HERO_NAME_ELEMENT_CHARTS', $hash2(["部位", "武器", "色", "動物", "神話／夢", "攻撃", "その他", "鳥", "光", "虫／爬虫類", "強さ"], {"部位": $$($nesting, 'HeroNameElementChart').$new("部位", [$hash2(["element", "mean"], {"element": "ハート", "mean": "心臓"}), $hash2(["element", "mean"], {"element": "フェイス", "mean": "顔"}), $hash2(["element", "mean"], {"element": "アーム", "mean": "腕"}), $hash2(["element", "mean"], {"element": "ショルダー", "mean": "肩"}), $hash2(["element", "mean"], {"element": "ヘッド", "mean": "頭"}), $hash2(["element", "mean"], {"element": "アイ", "mean": "眼"}), $hash2(["element", "mean"], {"element": "フィスト", "mean": "拳"}), $hash2(["element", "mean"], {"element": "ハンド", "mean": "手"}), $hash2(["element", "mean"], {"element": "クロウ", "mean": "爪"}), $hash2(["element", "mean"], {"element": "ボーン", "mean": "骨"})]), "武器": $$($nesting, 'HeroNameElementChart').$new("武器", [$hash2(["element", "mean"], {"element": "ナイヴス", "mean": "短剣"}), $hash2(["element", "mean"], {"element": "ソード", "mean": "剣"}), $hash2(["element", "mean"], {"element": "ハンマー", "mean": "鎚"}), $hash2(["element", "mean"], {"element": "ガン", "mean": "銃"}), $hash2(["element", "mean"], {"element": "スティール", "mean": "刃"}), $hash2(["element", "mean"], {"element": "タスク", "mean": "牙"}), $hash2(["element", "mean"], {"element": "ニューク", "mean": "核"}), $hash2(["element", "mean"], {"element": "アロー", "mean": "矢"}), $hash2(["element", "mean"], {"element": "ソウ", "mean": "ノコギリ"}), $hash2(["element", "mean"], {"element": "レイザー", "mean": "剃刀"})]), "色": $$($nesting, 'HeroNameElementChart').$new("色", [$hash2(["element", "mean"], {"element": "ブラック", "mean": "黒"}), $hash2(["element", "mean"], {"element": "グリーン", "mean": "緑"}), $hash2(["element", "mean"], {"element": "ブルー", "mean": "青"}), $hash2(["element", "mean"], {"element": "イエロー", "mean": "黃"}), $hash2(["element", "mean"], {"element": "レッド", "mean": "赤"}), $hash2(["element", "mean"], {"element": "バイオレット", "mean": "紫"}), $hash2(["element", "mean"], {"element": "シルバー", "mean": "銀"}), $hash2(["element", "mean"], {"element": "ゴールド", "mean": "金"}), $hash2(["element", "mean"], {"element": "ホワイト", "mean": "白"}), $hash2(["element", "mean"], {"element": "クリア", "mean": "透明"})]), "動物": $$($nesting, 'HeroNameElementChart').$new("動物", [$hash2(["element", "mean"], {"element": "バニー", "mean": "ウサギ"}), $hash2(["element", "mean"], {"element": "タイガー", "mean": "虎"}), $hash2(["element", "mean"], {"element": "シャーク", "mean": "鮫"}), $hash2(["element", "mean"], {"element": "キャット", "mean": "猫"}), $hash2(["element", "mean"], {"element": "コング", "mean": "ゴリラ"}), $hash2(["element", "mean"], {"element": "ドッグ", "mean": "犬"}), $hash2(["element", "mean"], {"element": "フォックス", "mean": "狐"}), $hash2(["element", "mean"], {"element": "パンサー", "mean": "豹"}), $hash2(["element", "mean"], {"element": "アス", "mean": "ロバ"}), $hash2(["element", "mean"], {"element": "バット", "mean": "蝙蝠"})]), "神話／夢": $$($nesting, 'HeroNameElementChart').$new("神話／夢", [$hash2(["element", "mean"], {"element": "アポカリプス", "mean": "黙示録"}), $hash2(["element", "mean"], {"element": "ウォー", "mean": "戦争"}), $hash2(["element", "mean"], {"element": "エターナル", "mean": "永遠"}), $hash2(["element", "mean"], {"element": "エンジェル", "mean": "天使"}), $hash2(["element", "mean"], {"element": "デビル", "mean": "悪魔"}), $hash2(["element", "mean"], {"element": "イモータル", "mean": "死なない"}), $hash2(["element", "mean"], {"element": "デス", "mean": "死神"}), $hash2(["element", "mean"], {"element": "ドリーム", "mean": "夢"}), $hash2(["element", "mean"], {"element": "ゴースト", "mean": "幽霊"}), $hash2(["element", "mean"], {"element": "デッド", "mean": "死んでいる"})]), "攻撃": $$($nesting, 'HeroNameElementChart').$new("攻撃", [$hash2(["element", "mean"], {"element": "ストローク", "mean": "一撃"}), $hash2(["element", "mean"], {"element": "クラッシュ", "mean": "壊す"}), $hash2(["element", "mean"], {"element": "ブロウ", "mean": "吹き飛ばす"}), $hash2(["element", "mean"], {"element": "ヒット", "mean": "打つ"}), $hash2(["element", "mean"], {"element": "パンチ", "mean": "殴る"}), $hash2(["element", "mean"], {"element": "キック", "mean": "蹴る"}), $hash2(["element", "mean"], {"element": "スラッシュ", "mean": "斬る"}), $hash2(["element", "mean"], {"element": "ペネトレイト", "mean": "貫く"}), $hash2(["element", "mean"], {"element": "ショット", "mean": "撃つ"}), $hash2(["element", "mean"], {"element": "キル", "mean": "殺す"})]), "その他": $$($nesting, 'HeroNameElementChart').$new("その他", [$hash2(["element", "mean"], {"element": "ヒューマン", "mean": "人間"}), $hash2(["element", "mean"], {"element": "エージェント", "mean": "代理人"}), $hash2(["element", "mean"], {"element": "ブースター", "mean": "泥棒"}), $hash2(["element", "mean"], {"element": "アイアン", "mean": "鉄"}), $hash2(["element", "mean"], {"element": "サンダー", "mean": "雷"}), $hash2(["element", "mean"], {"element": "ウォッチャー", "mean": "監視者"}), $hash2(["element", "mean"], {"element": "プール", "mean": "水たまり"}), $hash2(["element", "mean"], {"element": "マシーン", "mean": "機械"}), $hash2(["element", "mean"], {"element": "コールド", "mean": "冷たい"}), $hash2(["element", "mean"], {"element": "サイド", "mean": "側面"})]), "鳥": $$($nesting, 'HeroNameElementChart').$new("鳥", [$hash2(["element", "mean"], {"element": "ホーク", "mean": "鷹"}), $hash2(["element", "mean"], {"element": "ファルコン", "mean": "隼"}), $hash2(["element", "mean"], {"element": "キャナリー", "mean": "カナリア"}), $hash2(["element", "mean"], {"element": "ロビン", "mean": "コマツグミ"}), $hash2(["element", "mean"], {"element": "イーグル", "mean": "鷲"}), $hash2(["element", "mean"], {"element": "オウル", "mean": "フクロウ"}), $hash2(["element", "mean"], {"element": "レイブン", "mean": "ワタリガラス"}), $hash2(["element", "mean"], {"element": "ダック", "mean": "アヒル"}), $hash2(["element", "mean"], {"element": "ペンギン", "mean": "ペンギン"}), $hash2(["element", "mean"], {"element": "フェニックス", "mean": "不死鳥"})]), "光": $$($nesting, 'HeroNameElementChart').$new("光", [$hash2(["element", "mean"], {"element": "ライト", "mean": "光"}), $hash2(["element", "mean"], {"element": "シャドウ", "mean": "影"}), $hash2(["element", "mean"], {"element": "ファイアー", "mean": "炎"}), $hash2(["element", "mean"], {"element": "ダーク", "mean": "暗い"}), $hash2(["element", "mean"], {"element": "ナイト", "mean": "夜"}), $hash2(["element", "mean"], {"element": "ファントム", "mean": "幻影"}), $hash2(["element", "mean"], {"element": "トーチ", "mean": "灯火"}), $hash2(["element", "mean"], {"element": "フラッシュ", "mean": "閃光"}), $hash2(["element", "mean"], {"element": "ランタン", "mean": "手さげランプ"}), $hash2(["element", "mean"], {"element": "サン", "mean": "太陽"})]), "虫／爬虫類": $$($nesting, 'HeroNameElementChart').$new("虫／爬虫類", [$hash2(["element", "mean"], {"element": "ビートル", "mean": "甲虫"}), $hash2(["element", "mean"], {"element": "バタフライ／モス", "mean": "蝶／蛾"}), $hash2(["element", "mean"], {"element": "スネーク／コブラ", "mean": "蛇"}), $hash2(["element", "mean"], {"element": "アリゲーター", "mean": "ワニ"}), $hash2(["element", "mean"], {"element": "ローカスト", "mean": "バッタ"}), $hash2(["element", "mean"], {"element": "リザード", "mean": "トカゲ"}), $hash2(["element", "mean"], {"element": "タートル", "mean": "亀"}), $hash2(["element", "mean"], {"element": "スパイダー", "mean": "蜘蛛"}), $hash2(["element", "mean"], {"element": "アント", "mean": "アリ"}), $hash2(["element", "mean"], {"element": "マンティス", "mean": "カマキリ"})]), "強さ": $$($nesting, 'HeroNameElementChart').$new("強さ", [$hash2(["element", "mean"], {"element": "スーパー／ウルトラ", "mean": "超"}), $hash2(["element", "mean"], {"element": "ワンダー", "mean": "驚異的"}), $hash2(["element", "mean"], {"element": "アルティメット", "mean": "究極の"}), $hash2(["element", "mean"], {"element": "ファンタスティック", "mean": "途方もない"}), $hash2(["element", "mean"], {"element": "マイティ", "mean": "強い"}), $hash2(["element", "mean"], {"element": "インクレディブル", "mean": "凄い"}), $hash2(["element", "mean"], {"element": "アメージング", "mean": "素晴らしい"}), $hash2(["element", "mean"], {"element": "ワイルド", "mean": "狂乱の"}), $hash2(["element", "mean"], {"element": "グレイテスト", "mean": "至高の"}), $hash2(["element", "mean"], {"element": "マーベラス", "mean": "驚くべき"})])}).$freeze());
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting);
})(Opal);
