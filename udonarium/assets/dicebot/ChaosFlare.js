/* Generated by Opal 1.0.3 */
Opal.modules["utils/ArithmeticEvaluator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$tokenize', '$expr', '$private', '$split', '$gsub', '$mul', '$loop', '$consume', '$+', '$-', '$unary', '$*', '$div', '$zero?', '$===', '$ceil', '$/', '$to_f', '$round', '$floor', '$-@', '$term', '$expect', '$expect_number', '$!=', '$[]', '$integer?', '$to_i', '$!', '$nil?', '$match']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ArithmeticEvaluator');

    var $nesting = [self].concat($parent_nesting), $ArithmeticEvaluator_eval$1, $ArithmeticEvaluator_tokenize$2, $ArithmeticEvaluator_add$4, $ArithmeticEvaluator_mul$6, $ArithmeticEvaluator_div$8, $ArithmeticEvaluator_unary$9, $ArithmeticEvaluator_term$10, $ArithmeticEvaluator_consume$11, $ArithmeticEvaluator_expect$12, $ArithmeticEvaluator_expect_number$13, $ArithmeticEvaluator_integer$ques$14;

    self.$$prototype.error = self.$$prototype.round_type = self.$$prototype.tokens = self.$$prototype.idx = nil;
    
    
    Opal.def(self, '$eval', $ArithmeticEvaluator_eval$1 = function(expr, round_type) {
      var self = this, ret = nil;

      
      
      if (round_type == null) {
        round_type = "omit";
      };
      self.tokens = self.$tokenize(expr);
      self.idx = 0;
      self.error = false;
      self.round_type = round_type;
      ret = self.$expr();
      if ($truthy(self.error)) {
        return 0
      } else {
        return ret
      };
    }, $ArithmeticEvaluator_eval$1.$$arity = -2);
    self.$private();
    
    Opal.def(self, '$tokenize', $ArithmeticEvaluator_tokenize$2 = function $$tokenize(expr) {
      var $$3, self = this;

      return $send(expr, 'gsub', [/[\(\)\+\-\*\/]/], ($$3 = function(e){var self = $$3.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return "" + " " + (e) + " ";}, $$3.$$s = self, $$3.$$arity = 1, $$3)).$split(" ")
    }, $ArithmeticEvaluator_tokenize$2.$$arity = 1);
    
    Opal.def(self, '$add', $ArithmeticEvaluator_add$4 = function $$add() {
      var $$5, self = this, ret = nil;

      
      ret = self.$mul();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$5 = function(){var self = $$5.$$s || this;

      if ($truthy(self.$consume("+"))) {
          return (ret = $rb_plus(ret, self.$mul()))
        } else if ($truthy(self.$consume("-"))) {
          return (ret = $rb_minus(ret, self.$mul()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$5.$$s = self, $$5.$$brk = $brk, $$5.$$arity = 0, $$5))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_add$4.$$arity = 0);
    Opal.alias(self, "expr", "add");
    
    Opal.def(self, '$mul', $ArithmeticEvaluator_mul$6 = function $$mul() {
      var $$7, self = this, ret = nil;

      
      ret = self.$unary();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$7 = function(){var self = $$7.$$s || this;

      if ($truthy(self.$consume("*"))) {
          return (ret = $rb_times(ret, self.$unary()))
        } else if ($truthy(self.$consume("/"))) {
          return (ret = self.$div(ret, self.$unary()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$7.$$s = self, $$7.$$brk = $brk, $$7.$$arity = 0, $$7))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_mul$6.$$arity = 0);
    
    Opal.def(self, '$div', $ArithmeticEvaluator_div$8 = function $$div(left, right) {
      var self = this, $case = nil;

      
      if ($truthy(right['$zero?']())) {
        
        self.error = true;
        return 0;};
      return (function() {$case = self.round_type;
      if ("roundUp"['$===']($case)) {return $rb_divide(left.$to_f(), right).$ceil()}
      else if ("roundOff"['$===']($case)) {return $rb_divide(left.$to_f(), right).$round()}
      else {return $rb_divide(left, right).$floor()}})();
    }, $ArithmeticEvaluator_div$8.$$arity = 2);
    
    Opal.def(self, '$unary', $ArithmeticEvaluator_unary$9 = function $$unary() {
      var self = this;

      if ($truthy(self.$consume("+"))) {
        return self.$unary()
      } else if ($truthy(self.$consume("-"))) {
        return self.$unary()['$-@']()
      } else {
        return self.$term()
      }
    }, $ArithmeticEvaluator_unary$9.$$arity = 0);
    
    Opal.def(self, '$term', $ArithmeticEvaluator_term$10 = function $$term() {
      var self = this, ret = nil;

      if ($truthy(self.$consume("("))) {
        
        ret = self.$expr();
        self.$expect(")");
        return ret;
      } else {
        return self.$expect_number()
      }
    }, $ArithmeticEvaluator_term$10.$$arity = 0);
    
    Opal.def(self, '$consume', $ArithmeticEvaluator_consume$11 = function $$consume(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        return false};
      self.idx = $rb_plus(self.idx, 1);
      return true;
    }, $ArithmeticEvaluator_consume$11.$$arity = 1);
    
    Opal.def(self, '$expect', $ArithmeticEvaluator_expect$12 = function $$expect(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        self.error = true};
      return (self.idx = $rb_plus(self.idx, 1));
    }, $ArithmeticEvaluator_expect$12.$$arity = 1);
    
    Opal.def(self, '$expect_number', $ArithmeticEvaluator_expect_number$13 = function $$expect_number() {
      var self = this, ret = nil;

      
      if ($truthy(self['$integer?'](self.tokens['$[]'](self.idx)))) {
      } else {
        
        self.error = true;
        self.idx = $rb_plus(self.idx, 1);
        return 0;
      };
      ret = self.tokens['$[]'](self.idx).$to_i();
      self.idx = $rb_plus(self.idx, 1);
      return ret;
    }, $ArithmeticEvaluator_expect_number$13.$$arity = 0);
    return (Opal.def(self, '$integer?', $ArithmeticEvaluator_integer$ques$14 = function(str) {
      var self = this;

      return /^\d+$/.$match(str)['$nil?']()['$!']()
    }, $ArithmeticEvaluator_integer$ques$14.$$arity = 1), nil) && 'integer?';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/normalize"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$module_function', '$===', '$==', '$to_i']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Normalize');

    var $nesting = [self].concat($parent_nesting), $Normalize_comparison_operator$1, $Normalize_target_number$2;

    
    self.$module_function();
    
    Opal.def(self, '$comparison_operator', $Normalize_comparison_operator$1 = function $$comparison_operator(op) {
      var self = this, $case = nil;

      return (function() {$case = op;
      if (/<=|=</['$===']($case)) {return "<="}
      else if (/>=|=>/['$===']($case)) {return ">="}
      else if (/<>|!=|=!/['$===']($case)) {return "!="}
      else if (/</['$===']($case)) {return "<"}
      else if (/>/['$===']($case)) {return ">"}
      else if (/\=/['$===']($case)) {return "=="}
      else { return nil }})()
    }, $Normalize_comparison_operator$1.$$arity = 1);
    
    Opal.def(self, '$target_number', $Normalize_target_number$2 = function $$target_number(val) {
      var self = this;

      if (val['$==']("?")) {
        return val
      } else {
        return val.$to_i()
      }
    }, $Normalize_target_number$2.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/modifier_formatter"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$>', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ModifierFormatter');

    var $nesting = [self].concat($parent_nesting), $ModifierFormatter_format_modifier$1;

    
    Opal.def(self, '$format_modifier', $ModifierFormatter_format_modifier$1 = function $$format_modifier(modifier) {
      var self = this;

      if (modifier['$=='](0)) {
        return ""
      } else if ($truthy($rb_gt(modifier, 0))) {
        return "" + "+" + (modifier)
      } else {
        return modifier.$to_s()
      }
    }, $ModifierFormatter_format_modifier$1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/command_parser"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$attr_accessor', '$include', '$format_modifier', '$===', '$join', '$tokenize', '$new', '$lhs', '$take_cmp_op', '$cmp_op=', '$-', '$cmp_op', '$expr', '$target_number=', '$<', '$size', '$private', '$split', '$gsub', '$take', '$literal?', '$command_suffix', '$loop', '$consume', '$+', '$mul', '$command=', '$modify_number=', '$critical', '$unary', '$critical=', '$fumble', '$fumble=', '$dollar', '$dollar=', '$each', '$==', '$=~', '$[]', '$comparison_operator']);
  
  self.$require("utils/ArithmeticEvaluator");
  self.$require("utils/normalize");
  self.$require("utils/modifier_formatter");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CommandParser');

    var $nesting = [self].concat($parent_nesting), $CommandParser_initialize$1, $CommandParser_parse$4, $CommandParser_tokenize$5, $CommandParser_lhs$7, $CommandParser_command_suffix$9, $CommandParser_literal$ques$11, $CommandParser_take$13, $CommandParser_take_cmp_op$14;

    self.$$prototype.error = self.$$prototype.parsed = self.$$prototype.idx = self.$$prototype.tokens = self.$$prototype.literals = nil;
    
    
    Opal.def(self, '$initialize', $CommandParser_initialize$1 = function $$initialize($a) {
      var $post_args, literals, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      literals = $post_args;;
      self.literals = literals;
      return (self.round_type = "omit");
    }, $CommandParser_initialize$1.$$arity = -1);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parsed');

      var $nesting = [self].concat($parent_nesting), $Parsed_initialize$2, $Parsed_to_s$3;

      self.$$prototype.critical = self.$$prototype.fumble = self.$$prototype.dollar = self.$$prototype.modify_number = self.$$prototype.command = self.$$prototype.cmp_op = self.$$prototype.target_number = nil;
      
      self.$attr_accessor("command", "critical", "fumble", "dollar", "modify_number", "cmp_op", "target_number");
      self.$include($$($nesting, 'ModifierFormatter'));
      
      Opal.def(self, '$initialize', $Parsed_initialize$2 = function $$initialize() {
        var self = this;

        
        self.critical = nil;
        self.fumble = nil;
        return (self.dollar = nil);
      }, $Parsed_initialize$2.$$arity = 0);
      return (Opal.def(self, '$to_s', $Parsed_to_s$3 = function $$to_s(suffix_position) {
        var self = this, c = nil, f = nil, d = nil, m = nil, $case = nil;

        
        
        if (suffix_position == null) {
          suffix_position = "after_command";
        };
        c = (function() {if ($truthy(self.critical)) {
          return "" + "@" + (self.critical)
        } else {
          return nil
        }; return nil; })();
        f = (function() {if ($truthy(self.fumble)) {
          return "" + "#" + (self.fumble)
        } else {
          return nil
        }; return nil; })();
        d = (function() {if ($truthy(self.dollar)) {
          return "" + "$" + (self.dollar)
        } else {
          return nil
        }; return nil; })();
        m = self.$format_modifier(self.modify_number);
        return (function() {$case = suffix_position;
        if ("after_command"['$===']($case)) {return [self.command, c, f, d, m, self.cmp_op, self.target_number].$join()}
        else if ("after_modify_number"['$===']($case)) {return [self.command, m, c, f, d, self.cmp_op, self.target_number].$join()}
        else if ("after_target_number"['$===']($case)) {return [self.command, m, self.cmp_op, self.target_number, c, f, d].$join()}
        else { return nil }})();
      }, $Parsed_to_s$3.$$arity = -1), nil) && 'to_s';
    })($nesting[0], null, $nesting);
    
    Opal.def(self, '$parse', $CommandParser_parse$4 = function $$parse(expr, round_type) {
      var $a, self = this, $writer = nil;

      
      
      if (round_type == null) {
        round_type = "omit";
      };
      self.tokens = self.$tokenize(expr);
      self.idx = 0;
      self.error = false;
      self.round_type = round_type;
      self.parsed = $$($nesting, 'Parsed').$new();
      self.$lhs();
      if ($truthy(self.error)) {
        return nil};
      
      $writer = [self.$take_cmp_op()];
      $send(self.parsed, 'cmp_op=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [(function() {if ($truthy(self.parsed.$cmp_op())) {
        return self.$expr()
      } else {
        return nil
      }; return nil; })()];
      $send(self.parsed, 'target_number=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      if ($truthy(($truthy($a = $rb_lt(self.idx, self.tokens.$size())) ? $a : self.error))) {
        return nil};
      return self.parsed;
    }, $CommandParser_parse$4.$$arity = -2);
    self.$private();
    
    Opal.def(self, '$tokenize', $CommandParser_tokenize$5 = function $$tokenize(expr) {
      var $$6, self = this;

      return $send(expr, 'gsub', [/[\(\)\+\-*\/@#\$]|[<>!=]+/], ($$6 = function(e){var self = $$6.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return "" + " " + (e) + " ";}, $$6.$$s = self, $$6.$$arity = 1, $$6)).$split(" ")
    }, $CommandParser_tokenize$5.$$arity = 1);
    
    Opal.def(self, '$lhs', $CommandParser_lhs$7 = function $$lhs() {
      var $$8, self = this, command = nil, ret = nil, $writer = nil;

      
      command = self.$take();
      if ($truthy(self['$literal?'](command))) {
      } else {
        
        self.error = true;
        return nil;
      };
      self.$command_suffix();
      ret = 0;
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$8 = function(){var self = $$8.$$s || this;

      if ($truthy(self.$consume("+"))) {
          return (ret = $rb_plus(ret, self.$mul()))
        } else if ($truthy(self.$consume("-"))) {
          return (ret = $rb_minus(ret, self.$mul()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$8.$$s = self, $$8.$$brk = $brk, $$8.$$arity = 0, $$8))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      self.$command_suffix();
      
      $writer = [command];
      $send(self.parsed, 'command=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [ret];
      $send(self.parsed, 'modify_number=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;
    }, $CommandParser_lhs$7.$$arity = 0);
    
    Opal.def(self, '$command_suffix', $CommandParser_command_suffix$9 = function $$command_suffix() {
      var $$10, self = this;

      return (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$10 = function(){var self = $$10.$$s || this, $writer = nil;
        if (self.parsed == null) self.parsed = nil;

      if ($truthy(self.$consume("@"))) {
          
          if ($truthy(self.parsed.$critical())) {
            self.error = true};
          
          $writer = [self.$unary()];
          $send(self.parsed, 'critical=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        } else if ($truthy(self.$consume("#"))) {
          
          if ($truthy(self.parsed.$fumble())) {
            self.error = true};
          
          $writer = [self.$unary()];
          $send(self.parsed, 'fumble=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        } else if ($truthy(self.$consume("$"))) {
          
          if ($truthy(self.parsed.$dollar())) {
            self.error = true};
          
          $writer = [self.$unary()];
          $send(self.parsed, 'dollar=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$10.$$s = self, $$10.$$brk = $brk, $$10.$$arity = 0, $$10))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()
    }, $CommandParser_command_suffix$9.$$arity = 0);
    
    Opal.def(self, '$literal?', $CommandParser_literal$ques$11 = function(command) {try {

      var $$12, self = this;

      
      $send(self.literals, 'each', [], ($$12 = function(lit){var self = $$12.$$s || this, $case = nil;

      
        
        if (lit == null) {
          lit = nil;
        };
        return (function() {$case = lit;
        if ($$($nesting, 'String')['$===']($case)) {if (command['$=='](lit)) {
          Opal.ret(true)
        } else {
          return nil
        }}
        else if ($$($nesting, 'Regexp')['$===']($case)) {if ($truthy(command['$=~'](lit))) {
          Opal.ret(true)
        } else {
          return nil
        }}
        else { return nil }})();}, $$12.$$s = self, $$12.$$arity = 1, $$12));
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $CommandParser_literal$ques$11.$$arity = 1);
    
    Opal.def(self, '$take', $CommandParser_take$13 = function $$take() {
      var self = this, ret = nil;

      
      ret = self.tokens['$[]'](self.idx);
      self.idx = $rb_plus(self.idx, 1);
      return ret;
    }, $CommandParser_take$13.$$arity = 0);
    return (Opal.def(self, '$take_cmp_op', $CommandParser_take_cmp_op$14 = function $$take_cmp_op() {
      var self = this;

      return $$($nesting, 'Normalize').$comparison_operator(self.$take())
    }, $CommandParser_take_cmp_op$14.$$arity = 0), nil) && 'take_cmp_op';
  })($nesting[0], $$($nesting, 'ArithmeticEvaluator'), $nesting);
};

/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$require', '$setPrefixes', '$bcdice', '$set2Decks2Jokers', '$cardTrader', '$card_place=', '$-', '$canTapCard=', '$==', '$<=', '$>=', '$+', '$>', '$start_with?', '$roll_fate_table', '$cf_roll', '$private', '$match', '$[]', '$to_i', '$include?', '$floor', '$/', '$%', '$!', '$roll', '$new', '$parse', '$command', '$critical', '$fumble', '$dollar=', '$<', '$cmp_op', '$modify_number', '$compact', '$to_s', '$target_number', '$difference', '$join', '$-@', '$freeze']);
  
  self.$require("utils/command_parser");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ChaosFlare');

    var $nesting = [self].concat($parent_nesting), $ChaosFlare_postSet$1, $ChaosFlare_check_2D6$2, $ChaosFlare_rollDiceCommand$3, $ChaosFlare_roll_fate_table$4, $ChaosFlare_cf_roll$5, $ChaosFlare_difference$6;

    self.$$prototype.cmd = nil;
    
    Opal.const_set($nesting[0], 'ID', "ChaosFlare");
    Opal.const_set($nesting[0], 'NAME', "カオスフレア");
    Opal.const_set($nesting[0], 'SORT_KEY', "かおすふれあ");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "判定\n" + "CF\n" + "  書式: [ダイスの数]CF[修正値][@クリティカル値][#ファンブル値][>=目標値]\n" + "    CF以外は全て省略可能\n" + "  例:\n" + "  - CF 2D6,クリティカル値12,ファンブル値2で判定\n" + "  - CF+10@10 修正値+10,クリティカル値10で判定\n" + "  - CF+10#3 修正値+10,ファンブル値3で判定\n" + "  - CF+10>=10 目標値を指定した場合、差分値も出力する\n" + "  - 3CF+10@10#3>=10 3D6での判定\n" + "  - CF@9#3+8>=10\n" + "\n" + "2D6\n" + "  ファンブル値2で判定する。クリティカルの判定は行われない。\n" + "  目標値が設定された場合、差分値を出力する。\n" + "  - 2D6+4>=10\n" + "\n" + "各種表\n" + "  FT: 因縁表\n" + "  FTx: 数値を指定すると因果表の値を出力する\n" + "  - FT -> 11から66の間でランダム決定\n" + "  - FT23 -> 23の項目を出力\n" + "  - FT0\n" + "  - FT7\n");
    self.$setPrefixes(["\\d*CF.*", "FT\\d*"]);
    
    Opal.def(self, '$postSet', $ChaosFlare_postSet$1 = function $$postSet() {
      var self = this, $writer = nil;

      if ($truthy(self.$bcdice())) {
        
        self.$bcdice().$cardTrader().$set2Decks2Jokers();
        
        $writer = [0];
        $send(self.$bcdice().$cardTrader(), 'card_place=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [false];
        $send(self.$bcdice().$cardTrader(), 'canTapCard=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      } else {
        return nil
      }
    }, $ChaosFlare_postSet$1.$$arity = 0);
    
    Opal.def(self, '$check_2D6', $ChaosFlare_check_2D6$2 = function $$check_2D6(total, dice_total, _dice_list, cmp_op, target) {
      var self = this, output = nil;

      
      if (target['$==']("?")) {
        return ""};
      output = "";
      if ($truthy($rb_le(dice_total, 2))) {
        
        total = $rb_minus(total, 20);
        output = " ＞ ファンブル(-20)";};
      if (cmp_op['$=='](">=")) {
      } else {
        return output
      };
      if ($truthy($rb_ge(total, target))) {
        
        output = $rb_plus(output, " ＞ 成功");
        if ($truthy($rb_gt(total, target))) {
          output = $rb_plus(output, "" + " ＞ 差分値" + ($rb_minus(total, target)))};
      } else {
        output = $rb_plus(output, "" + " ＞ 失敗 ＞ 差分値" + ($rb_minus(total, target)))
      };
      return output;
    }, $ChaosFlare_check_2D6$2.$$arity = 5);
    
    Opal.def(self, '$rollDiceCommand', $ChaosFlare_rollDiceCommand$3 = function $$rollDiceCommand(command) {
      var self = this;

      if ($truthy(command['$start_with?']("FT"))) {
        return self.$roll_fate_table(command)
      } else {
        return self.$cf_roll(command)
      }
    }, $ChaosFlare_rollDiceCommand$3.$$arity = 1);
    self.$private();
    
    Opal.def(self, '$roll_fate_table', $ChaosFlare_roll_fate_table$4 = function $$roll_fate_table(command) {
      var $a, $b, self = this, m = nil, num = nil, dice1 = nil, dice2 = nil, index1 = nil, index2 = nil;

      
      m = /^FT(\d+)?/.$match(command);
      if ($truthy(m['$[]'](1))) {
        
        num = m['$[]'](1).$to_i();
        if ($truthy([0, 7]['$include?'](num))) {
          return "" + "因果表(" + (num) + ") ＞ " + ($$($nesting, 'FATE_TABLE')['$[]'](num)['$[]'](0))};
        dice1 = $rb_divide(num, 10).$floor();
        dice2 = num['$%'](10);
        if ($truthy(($truthy($a = $range(1, 6, false)['$include?'](dice1)['$!']()) ? $a : $range(1, 6, false)['$include?'](dice2)['$!']()))) {
          return nil};
      } else {
        
        $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice1 = ($a[0] == null ? nil : $a[0])), $b;
        $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice2 = ($a[0] == null ? nil : $a[0])), $b;
      };
      index1 = dice1;
      index2 = $rb_minus($rb_divide(dice2, 2).$floor(), 1);
      return "" + "因果表(" + (dice1) + (dice2) + ") ＞ " + ($$($nesting, 'FATE_TABLE')['$[]'](index1)['$[]'](index2));
    }, $ChaosFlare_roll_fate_table$4.$$arity = 1);
    
    Opal.def(self, '$cf_roll', $ChaosFlare_cf_roll$5 = function $$cf_roll(command) {
      var $a, $b, self = this, parser = nil, times = nil, critical = nil, fumble = nil, $writer = nil, dice_total = nil, dice_list_text = nil, is_critical = nil, is_fumble = nil, total = nil, sequence = nil;

      
      parser = $$($nesting, 'CommandParser').$new(/\d*CF/);
      self.cmd = parser.$parse(command);
      if ($truthy(self.cmd)) {
      } else {
        return nil
      };
      times = (function() {if (self.cmd.$command()['$==']("CF")) {
        return 2
      } else {
        return self.cmd.$command().$to_i()
      }; return nil; })();
      critical = ($truthy($a = self.cmd.$critical()) ? $a : 12);
      fumble = ($truthy($a = self.cmd.$fumble()) ? $a : 2);
      
      $writer = [nil];
      $send(self.cmd, 'dollar=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      if ($truthy(($truthy($a = $rb_lt(times, 0)) ? $a : [">=", nil]['$include?'](self.cmd.$cmp_op())['$!']()))) {
        return nil};
      $b = self.$roll(times, 6), $a = Opal.to_ary($b), (dice_total = ($a[0] == null ? nil : $a[0])), (dice_list_text = ($a[1] == null ? nil : $a[1])), $b;
      is_critical = $rb_ge(dice_total, critical);
      is_fumble = $rb_le(dice_total, fumble);
      total = (function() {if ($truthy(is_critical)) {
        return 30
      } else if ($truthy(is_fumble)) {
        return -20
      } else {
        return dice_total
      }; return nil; })();
      total = $rb_plus(total, self.cmd.$modify_number());
      sequence = ["" + "(" + (self.cmd.$to_s("after_modify_number")) + ")", "" + (dice_total) + "[" + (dice_list_text) + "]", total.$to_s(), (function() {if ($truthy($rb_lt(total, 0))) {
        return "0"
      } else {
        return nil
      }; return nil; })(), (function() {if ($truthy(is_critical)) {
        return "クリティカル"
      } else {
        return nil
      }; return nil; })(), (function() {if ($truthy(is_fumble)) {
        return "ファンブル"
      } else {
        return nil
      }; return nil; })(), (function() {if ($truthy(self.cmd.$target_number())) {
        return "" + "差分値 " + (self.$difference(total))
      } else {
        return nil
      }; return nil; })()].$compact();
      return sequence.$join(" ＞ ");
    }, $ChaosFlare_cf_roll$5.$$arity = 1);
    
    Opal.def(self, '$difference', $ChaosFlare_difference$6 = function $$difference(total) {
      var self = this;

      if ($truthy($rb_lt(total, 0))) {
        return self.cmd.$target_number()['$-@']()
      } else {
        return $rb_minus(total, self.cmd.$target_number())
      }
    }, $ChaosFlare_difference$6.$$arity = 1);
    return Opal.const_set($nesting[0], 'FATE_TABLE', [["腐れ縁"], ["純愛", "親近感", "庇護"], ["信頼", "感服", "共感"], ["友情", "尊敬", "慕情"], ["好敵手", "期待", "借り"], ["興味", "憎悪", "悲しみ"], ["恐怖", "執着", "利用"], ["任意"]].$freeze());
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting);
})(Opal);
