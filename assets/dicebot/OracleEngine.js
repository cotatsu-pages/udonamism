/* Generated by Opal 1.0.3 */
Opal.modules["utils/ArithmeticEvaluator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$tokenize', '$expr', '$private', '$split', '$gsub', '$mul', '$loop', '$consume', '$+', '$-', '$unary', '$*', '$div', '$zero?', '$===', '$ceil', '$/', '$to_f', '$round', '$floor', '$-@', '$term', '$expect', '$expect_number', '$!=', '$[]', '$integer?', '$to_i', '$!', '$nil?', '$match']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ArithmeticEvaluator');

    var $nesting = [self].concat($parent_nesting), $ArithmeticEvaluator_eval$1, $ArithmeticEvaluator_tokenize$2, $ArithmeticEvaluator_add$4, $ArithmeticEvaluator_mul$6, $ArithmeticEvaluator_div$8, $ArithmeticEvaluator_unary$9, $ArithmeticEvaluator_term$10, $ArithmeticEvaluator_consume$11, $ArithmeticEvaluator_expect$12, $ArithmeticEvaluator_expect_number$13, $ArithmeticEvaluator_integer$ques$14;

    self.$$prototype.error = self.$$prototype.round_type = self.$$prototype.tokens = self.$$prototype.idx = nil;
    
    
    Opal.def(self, '$eval', $ArithmeticEvaluator_eval$1 = function(expr, round_type) {
      var self = this, ret = nil;

      
      
      if (round_type == null) {
        round_type = "omit";
      };
      self.tokens = self.$tokenize(expr);
      self.idx = 0;
      self.error = false;
      self.round_type = round_type;
      ret = self.$expr();
      if ($truthy(self.error)) {
        return 0
      } else {
        return ret
      };
    }, $ArithmeticEvaluator_eval$1.$$arity = -2);
    self.$private();
    
    Opal.def(self, '$tokenize', $ArithmeticEvaluator_tokenize$2 = function $$tokenize(expr) {
      var $$3, self = this;

      return $send(expr, 'gsub', [/[\(\)\+\-\*\/]/], ($$3 = function(e){var self = $$3.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return "" + " " + (e) + " ";}, $$3.$$s = self, $$3.$$arity = 1, $$3)).$split(" ")
    }, $ArithmeticEvaluator_tokenize$2.$$arity = 1);
    
    Opal.def(self, '$add', $ArithmeticEvaluator_add$4 = function $$add() {
      var $$5, self = this, ret = nil;

      
      ret = self.$mul();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$5 = function(){var self = $$5.$$s || this;

      if ($truthy(self.$consume("+"))) {
          return (ret = $rb_plus(ret, self.$mul()))
        } else if ($truthy(self.$consume("-"))) {
          return (ret = $rb_minus(ret, self.$mul()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$5.$$s = self, $$5.$$brk = $brk, $$5.$$arity = 0, $$5))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_add$4.$$arity = 0);
    Opal.alias(self, "expr", "add");
    
    Opal.def(self, '$mul', $ArithmeticEvaluator_mul$6 = function $$mul() {
      var $$7, self = this, ret = nil;

      
      ret = self.$unary();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$7 = function(){var self = $$7.$$s || this;

      if ($truthy(self.$consume("*"))) {
          return (ret = $rb_times(ret, self.$unary()))
        } else if ($truthy(self.$consume("/"))) {
          return (ret = self.$div(ret, self.$unary()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$7.$$s = self, $$7.$$brk = $brk, $$7.$$arity = 0, $$7))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_mul$6.$$arity = 0);
    
    Opal.def(self, '$div', $ArithmeticEvaluator_div$8 = function $$div(left, right) {
      var self = this, $case = nil;

      
      if ($truthy(right['$zero?']())) {
        
        self.error = true;
        return 0;};
      return (function() {$case = self.round_type;
      if ("roundUp"['$===']($case)) {return $rb_divide(left.$to_f(), right).$ceil()}
      else if ("roundOff"['$===']($case)) {return $rb_divide(left.$to_f(), right).$round()}
      else {return $rb_divide(left, right).$floor()}})();
    }, $ArithmeticEvaluator_div$8.$$arity = 2);
    
    Opal.def(self, '$unary', $ArithmeticEvaluator_unary$9 = function $$unary() {
      var self = this;

      if ($truthy(self.$consume("+"))) {
        return self.$unary()
      } else if ($truthy(self.$consume("-"))) {
        return self.$unary()['$-@']()
      } else {
        return self.$term()
      }
    }, $ArithmeticEvaluator_unary$9.$$arity = 0);
    
    Opal.def(self, '$term', $ArithmeticEvaluator_term$10 = function $$term() {
      var self = this, ret = nil;

      if ($truthy(self.$consume("("))) {
        
        ret = self.$expr();
        self.$expect(")");
        return ret;
      } else {
        return self.$expect_number()
      }
    }, $ArithmeticEvaluator_term$10.$$arity = 0);
    
    Opal.def(self, '$consume', $ArithmeticEvaluator_consume$11 = function $$consume(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        return false};
      self.idx = $rb_plus(self.idx, 1);
      return true;
    }, $ArithmeticEvaluator_consume$11.$$arity = 1);
    
    Opal.def(self, '$expect', $ArithmeticEvaluator_expect$12 = function $$expect(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        self.error = true};
      return (self.idx = $rb_plus(self.idx, 1));
    }, $ArithmeticEvaluator_expect$12.$$arity = 1);
    
    Opal.def(self, '$expect_number', $ArithmeticEvaluator_expect_number$13 = function $$expect_number() {
      var self = this, ret = nil;

      
      if ($truthy(self['$integer?'](self.tokens['$[]'](self.idx)))) {
      } else {
        
        self.error = true;
        self.idx = $rb_plus(self.idx, 1);
        return 0;
      };
      ret = self.tokens['$[]'](self.idx).$to_i();
      self.idx = $rb_plus(self.idx, 1);
      return ret;
    }, $ArithmeticEvaluator_expect_number$13.$$arity = 0);
    return (Opal.def(self, '$integer?', $ArithmeticEvaluator_integer$ques$14 = function(str) {
      var self = this;

      return /^\d+$/.$match(str)['$nil?']()['$!']()
    }, $ArithmeticEvaluator_integer$ques$14.$$arity = 1), nil) && 'integer?';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/normalize"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$module_function', '$===', '$==', '$to_i']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Normalize');

    var $nesting = [self].concat($parent_nesting), $Normalize_comparison_operator$1, $Normalize_target_number$2;

    
    self.$module_function();
    
    Opal.def(self, '$comparison_operator', $Normalize_comparison_operator$1 = function $$comparison_operator(op) {
      var self = this, $case = nil;

      return (function() {$case = op;
      if (/<=|=</['$===']($case)) {return "<="}
      else if (/>=|=>/['$===']($case)) {return ">="}
      else if (/<>|!=|=!/['$===']($case)) {return "!="}
      else if (/</['$===']($case)) {return "<"}
      else if (/>/['$===']($case)) {return ">"}
      else if (/\=/['$===']($case)) {return "=="}
      else { return nil }})()
    }, $Normalize_comparison_operator$1.$$arity = 1);
    
    Opal.def(self, '$target_number', $Normalize_target_number$2 = function $$target_number(val) {
      var self = this;

      if (val['$==']("?")) {
        return val
      } else {
        return val.$to_i()
      }
    }, $Normalize_target_number$2.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/modifier_formatter"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$>', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ModifierFormatter');

    var $nesting = [self].concat($parent_nesting), $ModifierFormatter_format_modifier$1;

    
    Opal.def(self, '$format_modifier', $ModifierFormatter_format_modifier$1 = function $$format_modifier(modifier) {
      var self = this;

      if (modifier['$=='](0)) {
        return ""
      } else if ($truthy($rb_gt(modifier, 0))) {
        return "" + "+" + (modifier)
      } else {
        return modifier.$to_s()
      }
    }, $ModifierFormatter_format_modifier$1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/command_parser"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$attr_accessor', '$include', '$format_modifier', '$===', '$join', '$tokenize', '$new', '$lhs', '$take_cmp_op', '$cmp_op=', '$-', '$cmp_op', '$expr', '$target_number=', '$<', '$size', '$private', '$split', '$gsub', '$take', '$literal?', '$command_suffix', '$loop', '$consume', '$+', '$mul', '$command=', '$modify_number=', '$critical', '$unary', '$critical=', '$fumble', '$fumble=', '$dollar', '$dollar=', '$each', '$==', '$=~', '$[]', '$comparison_operator']);
  
  self.$require("utils/ArithmeticEvaluator");
  self.$require("utils/normalize");
  self.$require("utils/modifier_formatter");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CommandParser');

    var $nesting = [self].concat($parent_nesting), $CommandParser_initialize$1, $CommandParser_parse$4, $CommandParser_tokenize$5, $CommandParser_lhs$7, $CommandParser_command_suffix$9, $CommandParser_literal$ques$11, $CommandParser_take$13, $CommandParser_take_cmp_op$14;

    self.$$prototype.error = self.$$prototype.parsed = self.$$prototype.idx = self.$$prototype.tokens = self.$$prototype.literals = nil;
    
    
    Opal.def(self, '$initialize', $CommandParser_initialize$1 = function $$initialize($a) {
      var $post_args, literals, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      literals = $post_args;;
      self.literals = literals;
      return (self.round_type = "omit");
    }, $CommandParser_initialize$1.$$arity = -1);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parsed');

      var $nesting = [self].concat($parent_nesting), $Parsed_initialize$2, $Parsed_to_s$3;

      self.$$prototype.critical = self.$$prototype.fumble = self.$$prototype.dollar = self.$$prototype.modify_number = self.$$prototype.command = self.$$prototype.cmp_op = self.$$prototype.target_number = nil;
      
      self.$attr_accessor("command", "critical", "fumble", "dollar", "modify_number", "cmp_op", "target_number");
      self.$include($$($nesting, 'ModifierFormatter'));
      
      Opal.def(self, '$initialize', $Parsed_initialize$2 = function $$initialize() {
        var self = this;

        
        self.critical = nil;
        self.fumble = nil;
        return (self.dollar = nil);
      }, $Parsed_initialize$2.$$arity = 0);
      return (Opal.def(self, '$to_s', $Parsed_to_s$3 = function $$to_s(suffix_position) {
        var self = this, c = nil, f = nil, d = nil, m = nil, $case = nil;

        
        
        if (suffix_position == null) {
          suffix_position = "after_command";
        };
        c = (function() {if ($truthy(self.critical)) {
          return "" + "@" + (self.critical)
        } else {
          return nil
        }; return nil; })();
        f = (function() {if ($truthy(self.fumble)) {
          return "" + "#" + (self.fumble)
        } else {
          return nil
        }; return nil; })();
        d = (function() {if ($truthy(self.dollar)) {
          return "" + "$" + (self.dollar)
        } else {
          return nil
        }; return nil; })();
        m = self.$format_modifier(self.modify_number);
        return (function() {$case = suffix_position;
        if ("after_command"['$===']($case)) {return [self.command, c, f, d, m, self.cmp_op, self.target_number].$join()}
        else if ("after_modify_number"['$===']($case)) {return [self.command, m, c, f, d, self.cmp_op, self.target_number].$join()}
        else if ("after_target_number"['$===']($case)) {return [self.command, m, self.cmp_op, self.target_number, c, f, d].$join()}
        else { return nil }})();
      }, $Parsed_to_s$3.$$arity = -1), nil) && 'to_s';
    })($nesting[0], null, $nesting);
    
    Opal.def(self, '$parse', $CommandParser_parse$4 = function $$parse(expr, round_type) {
      var $a, self = this, $writer = nil;

      
      
      if (round_type == null) {
        round_type = "omit";
      };
      self.tokens = self.$tokenize(expr);
      self.idx = 0;
      self.error = false;
      self.round_type = round_type;
      self.parsed = $$($nesting, 'Parsed').$new();
      self.$lhs();
      if ($truthy(self.error)) {
        return nil};
      
      $writer = [self.$take_cmp_op()];
      $send(self.parsed, 'cmp_op=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [(function() {if ($truthy(self.parsed.$cmp_op())) {
        return self.$expr()
      } else {
        return nil
      }; return nil; })()];
      $send(self.parsed, 'target_number=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      if ($truthy(($truthy($a = $rb_lt(self.idx, self.tokens.$size())) ? $a : self.error))) {
        return nil};
      return self.parsed;
    }, $CommandParser_parse$4.$$arity = -2);
    self.$private();
    
    Opal.def(self, '$tokenize', $CommandParser_tokenize$5 = function $$tokenize(expr) {
      var $$6, self = this;

      return $send(expr, 'gsub', [/[\(\)\+\-*\/@#\$]|[<>!=]+/], ($$6 = function(e){var self = $$6.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return "" + " " + (e) + " ";}, $$6.$$s = self, $$6.$$arity = 1, $$6)).$split(" ")
    }, $CommandParser_tokenize$5.$$arity = 1);
    
    Opal.def(self, '$lhs', $CommandParser_lhs$7 = function $$lhs() {
      var $$8, self = this, command = nil, ret = nil, $writer = nil;

      
      command = self.$take();
      if ($truthy(self['$literal?'](command))) {
      } else {
        
        self.error = true;
        return nil;
      };
      self.$command_suffix();
      ret = 0;
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$8 = function(){var self = $$8.$$s || this;

      if ($truthy(self.$consume("+"))) {
          return (ret = $rb_plus(ret, self.$mul()))
        } else if ($truthy(self.$consume("-"))) {
          return (ret = $rb_minus(ret, self.$mul()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$8.$$s = self, $$8.$$brk = $brk, $$8.$$arity = 0, $$8))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      self.$command_suffix();
      
      $writer = [command];
      $send(self.parsed, 'command=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [ret];
      $send(self.parsed, 'modify_number=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;
    }, $CommandParser_lhs$7.$$arity = 0);
    
    Opal.def(self, '$command_suffix', $CommandParser_command_suffix$9 = function $$command_suffix() {
      var $$10, self = this;

      return (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$10 = function(){var self = $$10.$$s || this, $writer = nil;
        if (self.parsed == null) self.parsed = nil;

      if ($truthy(self.$consume("@"))) {
          
          if ($truthy(self.parsed.$critical())) {
            self.error = true};
          
          $writer = [self.$unary()];
          $send(self.parsed, 'critical=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        } else if ($truthy(self.$consume("#"))) {
          
          if ($truthy(self.parsed.$fumble())) {
            self.error = true};
          
          $writer = [self.$unary()];
          $send(self.parsed, 'fumble=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        } else if ($truthy(self.$consume("$"))) {
          
          if ($truthy(self.parsed.$dollar())) {
            self.error = true};
          
          $writer = [self.$unary()];
          $send(self.parsed, 'dollar=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$10.$$s = self, $$10.$$brk = $brk, $$10.$$arity = 0, $$10))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()
    }, $CommandParser_command_suffix$9.$$arity = 0);
    
    Opal.def(self, '$literal?', $CommandParser_literal$ques$11 = function(command) {try {

      var $$12, self = this;

      
      $send(self.literals, 'each', [], ($$12 = function(lit){var self = $$12.$$s || this, $case = nil;

      
        
        if (lit == null) {
          lit = nil;
        };
        return (function() {$case = lit;
        if ($$($nesting, 'String')['$===']($case)) {if (command['$=='](lit)) {
          Opal.ret(true)
        } else {
          return nil
        }}
        else if ($$($nesting, 'Regexp')['$===']($case)) {if ($truthy(command['$=~'](lit))) {
          Opal.ret(true)
        } else {
          return nil
        }}
        else { return nil }})();}, $$12.$$s = self, $$12.$$arity = 1, $$12));
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $CommandParser_literal$ques$11.$$arity = 1);
    
    Opal.def(self, '$take', $CommandParser_take$13 = function $$take() {
      var self = this, ret = nil;

      
      ret = self.tokens['$[]'](self.idx);
      self.idx = $rb_plus(self.idx, 1);
      return ret;
    }, $CommandParser_take$13.$$arity = 0);
    return (Opal.def(self, '$take_cmp_op', $CommandParser_take_cmp_op$14 = function $$take_cmp_op() {
      var self = this;

      return $$($nesting, 'Normalize').$comparison_operator(self.$take())
    }, $CommandParser_take_cmp_op$14.$$arity = 0), nil) && 'take_cmp_op';
  })($nesting[0], $$($nesting, 'ArithmeticEvaluator'), $nesting);
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/format"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$module_function', '$===', '$to_s', '$==', '$>']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Format');

    var $nesting = [self].concat($parent_nesting), $Format_comparison_operator$1, $Format_modifier$2;

    
    self.$module_function();
    
    Opal.def(self, '$comparison_operator', $Format_comparison_operator$1 = function $$comparison_operator(op) {
      var self = this, $case = nil;

      return (function() {$case = op;
      if ("=="['$===']($case)) {return "="}
      else if ("!="['$===']($case)) {return "<>"}
      else if ($$($nesting, 'Symbol')['$===']($case)) {return op.$to_s()}
      else { return nil }})()
    }, $Format_comparison_operator$1.$$arity = 1);
    
    Opal.def(self, '$modifier', $Format_modifier$2 = function $$modifier(number) {
      var self = this;

      if (number['$=='](0)) {
        return ""
      } else if ($truthy($rb_gt(number, 0))) {
        return "" + "+" + (number)
      } else {
        return number.$to_s()
      }
    }, $Format_modifier$2.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$include', '$setPrefixes', '$===', '$clutch_roll', '$damage_roll', '$r_roll', '$debug', '$new', '$parse', '$include?', '$cmp_op', '$map', '$split', '$command', '$to_proc', '$clamp', '$target_number', '$target_number=', '$-', '$==', '$sort', '$roll_', '$+', '$modify_number', '$expr_clutch', '$join', '$result_clutch', '$last', '$comparison_operator', '$format_modifier', '$!=', '$>=', '$<', '$>', '$roll', '$to_i', '$normalize_critical', '$critical', '$normalize_fumble', '$fumble', '$abs', '$dollar', '$pop', '$inject', '$dup', '$expr_r', '$dice_result_r', '$result_r', '$empty?', '$<=', '$to_s', '$match', '$nil?', '$!', '$expr_damage', '$result_damage']);
  
  self.$require("utils/command_parser");
  self.$require("utils/format");
  self.$require("utils/modifier_formatter");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'OracleEngine');

    var $nesting = [self].concat($parent_nesting), $OracleEngine_initialize$1, $OracleEngine_rollDiceCommand$2, $OracleEngine_clutch_roll$3, $OracleEngine_expr_clutch$5, $OracleEngine_result_clutch$6, $OracleEngine_clamp$7, $OracleEngine_roll_$8, $OracleEngine_r_roll$9, $OracleEngine_expr_r$10, $OracleEngine_dice_result_r$11, $OracleEngine_result_r$12, $OracleEngine_normalize_critical$13, $OracleEngine_normalize_fumble$14, $OracleEngine_damage_roll$15, $OracleEngine_expr_damage$16, $OracleEngine_result_damage$17;

    self.$$prototype.cmd = self.$$prototype.max_shift = self.$$prototype.times = self.$$prototype["break"] = self.$$prototype.critical = self.$$prototype.fumble = nil;
    
    self.$include($$($nesting, 'ModifierFormatter'));
    Opal.const_set($nesting[0], 'ID', "OracleEngine");
    Opal.const_set($nesting[0], 'NAME', "オラクルエンジン");
    Opal.const_set($nesting[0], 'SORT_KEY', "おらくるえんしん");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "  ・クラッチロール （xCL+y>=z)\n" + "  ダイスをx個振り、1個以上目標シフトzに到達したか判定します。修正yは全てのダイスにかかります。\n" + "  成功した時は目標シフトを、失敗した時はダイスの最大値-1シフトを返します\n" + "  zが指定されないときは、ダイスをx個を振り、それに修正yしたものを返します。\n" + "  通常、最低シフトは1、最大シフトは6です。目標シフトもそろえられます。\n" + "  また、CLの後に7を入れ、(xCL7+y>=z)と入力すると最大シフトが7になります。\n" + " ・判定 (xR6+y@c#f$b>=z)\n" + "  ダイスをx個振り、大きいもの2つだけを見て達成値を算出し、成否を判定します。修正yは達成値にかかります。\n" + "  ダイスブレイクとしてbを、クリティカル値としてcを、ファンブル値としてfを指定できます。\n" + "  それぞれ指定されない時、0,12,2になります。\n" + "  クリティカル値の上限はなし、下限は2。ファンブル値の上限は12、下限は0。\n" + "  zが指定されないとき、達成値の算出のみ行います。\n" + " ・ダメージロールのダイスブレイク (xD6+y$b)\n" + "  ダイスをx個振り、合計値を出します。修正yは合計値にかかります。\n" + "  ダイスブレイクとしてbを指定します。合計値は0未満になりません。\n");
    self.$setPrefixes(["\\d+CL.*", "\\d+R6.*", "\\d+D6.*\\$[\\+\\-]?\\d+.*"]);
    
    Opal.def(self, '$initialize', $OracleEngine_initialize$1 = function $$initialize() {
      var $iter = $OracleEngine_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $OracleEngine_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $OracleEngine_initialize$1, false), $zuper, $iter);
      return (self.sortType = 3);
    }, $OracleEngine_initialize$1.$$arity = 0);
    
    Opal.def(self, '$rollDiceCommand', $OracleEngine_rollDiceCommand$2 = function $$rollDiceCommand(command) {
      var self = this, $case = nil;

      return (function() {$case = command;
      if (/\d+CL.*/i['$===']($case)) {return self.$clutch_roll(command)}
      else if (/\d+D6.*\$[\+\-]?\d.*/['$===']($case)) {return self.$damage_roll(command)}
      else if (/\d+R6/['$===']($case)) {return self.$r_roll(command)}
      else { return nil }})()
    }, $OracleEngine_rollDiceCommand$2.$$arity = 1);
    
    Opal.def(self, '$clutch_roll', $OracleEngine_clutch_roll$3 = function $$clutch_roll(string) {
      var $a, $b, $$4, self = this, parser = nil, $writer = nil, dice_list = nil, sequence = nil;

      
      self.$debug("clutch_roll begin", string);
      parser = $$($nesting, 'CommandParser').$new(/\d+CL[67]?/i);
      self.cmd = parser.$parse(string);
      if ($truthy(self.cmd)) {
      } else {
        return nil
      };
      if ($truthy([">=", nil]['$include?'](self.cmd.$cmp_op()))) {
      } else {
        return nil
      };
      $b = $send(self.cmd.$command().$split("CL"), 'map', [], "to_i".$to_proc()), $a = Opal.to_ary($b), (self.times = ($a[0] == null ? nil : $a[0])), (self.max_shift = ($a[1] == null ? nil : $a[1])), $b;
      self.max_shift = ($truthy($a = self.max_shift) ? $a : 6);
      if ($truthy(self.cmd.$cmp_op())) {
        
        $writer = [self.$clamp(self.cmd.$target_number(), 1, self.max_shift)];
        $send(self.cmd, 'target_number=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];};
      if (self.times['$=='](0)) {
        return nil};
      dice_list = $send(self.$roll_(self.times, 6), 'map', [], ($$4 = function(x){var self = $$4.$$s || this;
        if (self.cmd == null) self.cmd = nil;
        if (self.max_shift == null) self.max_shift = nil;

      
        
        if (x == null) {
          x = nil;
        };
        return self.$clamp($rb_plus(x, self.cmd.$modify_number()), 1, self.max_shift);}, $$4.$$s = self, $$4.$$arity = 1, $$4)).$sort();
      sequence = [self.$expr_clutch(), "" + "[" + (dice_list.$join(", ")) + "]", self.$result_clutch(dice_list.$last())];
      return sequence.$join(" ＞ ");
    }, $OracleEngine_clutch_roll$3.$$arity = 1);
    
    Opal.def(self, '$expr_clutch', $OracleEngine_expr_clutch$5 = function $$expr_clutch() {
      var self = this, max_shift = nil, cmp_op = nil, modify_number = nil;

      
      max_shift = (function() {if (self.max_shift['$=='](7)) {
        return 7
      } else {
        return nil
      }; return nil; })();
      cmp_op = $$($nesting, 'Format').$comparison_operator(self.cmd.$cmp_op());
      modify_number = self.$format_modifier(self.cmd.$modify_number());
      return "" + "(" + (self.times) + "CL" + (max_shift) + (modify_number) + (cmp_op) + (self.cmd.$target_number()) + ")";
    }, $OracleEngine_expr_clutch$5.$$arity = 0);
    
    Opal.def(self, '$result_clutch', $OracleEngine_result_clutch$6 = function $$result_clutch(after_shift) {
      var self = this;

      if ($truthy(self.cmd.$cmp_op()['$!='](">="))) {
        return "" + "シフト" + (after_shift)
      } else if ($truthy($rb_ge(after_shift, self.cmd.$target_number()))) {
        return "" + "成功 シフト" + (self.cmd.$target_number())
      } else {
        
        after_shift = $rb_minus(after_shift, 1);
        if ($truthy($rb_lt(after_shift, 1))) {
          after_shift = 1};
        return "" + "失敗 シフト" + (after_shift);
      }
    }, $OracleEngine_result_clutch$6.$$arity = 1);
    
    Opal.def(self, '$clamp', $OracleEngine_clamp$7 = function $$clamp(i, min, max) {
      var self = this;

      if ($truthy($rb_lt(i, min))) {
        return min
      } else if ($truthy($rb_gt(i, max))) {
        return max
      } else {
        return i
      }
    }, $OracleEngine_clamp$7.$$arity = 3);
    
    Opal.def(self, '$roll_', $OracleEngine_roll_$8 = function $$roll_(times, sides) {
      var $a, $b, self = this, _ = nil, dice_list = nil;

      
      $b = self.$roll(times, sides), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (dice_list = ($a[1] == null ? nil : $a[1])), $b;
      return $send(dice_list.$split(","), 'map', [], "to_i".$to_proc());
    }, $OracleEngine_roll_$8.$$arity = 2);
    
    Opal.def(self, '$r_roll', $OracleEngine_r_roll$9 = function $$r_roll(string) {
      var $a, self = this, parser = nil, dice_list = nil, dice_broken = nil, dice_total = nil, total = nil, sequence = nil;

      
      parser = $$($nesting, 'CommandParser').$new(/\d+R6/i);
      self.cmd = parser.$parse(string);
      if ($truthy(self.cmd)) {
      } else {
        return nil
      };
      if ($truthy([">=", nil]['$include?'](self.cmd.$cmp_op()))) {
      } else {
        return nil
      };
      self.times = self.cmd.$command().$to_i();
      if (self.times['$=='](0)) {
        return nil};
      self.critical = self.$normalize_critical(($truthy($a = self.cmd.$critical()) ? $a : 12), string);
      self.fumble = self.$normalize_fumble(($truthy($a = self.cmd.$fumble()) ? $a : 2), string);
      self["break"] = ($truthy($a = self.cmd.$dollar()) ? $a : 0).$abs();
      dice_list = self.$roll_(self.times, 6).$sort();
      dice_broken = dice_list.$pop(self["break"]);
      dice_total = dice_list.$dup().$pop(2).$inject(0, "+");
      total = $rb_plus(dice_total, self.cmd.$modify_number());
      sequence = [self.$expr_r(), self.$dice_result_r(dice_total, dice_list, dice_broken), self.$result_r(dice_total, total)];
      return sequence.$join(" ＞ ");
    }, $OracleEngine_r_roll$9.$$arity = 1);
    
    Opal.def(self, '$expr_r', $OracleEngine_expr_r$10 = function $$expr_r() {
      var self = this, modify_number = nil, critical = nil, fumble = nil, brak = nil, cmp_op = nil;

      
      modify_number = self.$format_modifier(self.cmd.$modify_number());
      critical = (function() {if (self.critical['$=='](12)) {
        return ""
      } else {
        return "" + "c[" + (self.critical) + "]"
      }; return nil; })();
      fumble = (function() {if (self.fumble['$=='](2)) {
        return ""
      } else {
        return "" + "f[" + (self.fumble) + "]"
      }; return nil; })();
      brak = (function() {if (self["break"]['$=='](0)) {
        return ""
      } else {
        return "" + "b[" + (self["break"]) + "]"
      }; return nil; })();
      cmp_op = $$($nesting, 'Format').$comparison_operator(self.cmd.$cmp_op());
      return "" + "(" + (self.times) + "R6" + (modify_number) + (critical) + (fumble) + (brak) + (cmp_op) + (self.cmd.$target_number()) + ")";
    }, $OracleEngine_expr_r$10.$$arity = 0);
    
    Opal.def(self, '$dice_result_r', $OracleEngine_dice_result_r$11 = function $$dice_result_r(dice_total, dice_list, break_list) {
      var self = this, modify_number_text = nil;

      
      modify_number_text = self.$format_modifier(self.cmd.$modify_number());
      if ($truthy(break_list['$empty?']())) {
        return "" + (dice_total) + "[" + (dice_list.$join(", ")) + "]" + (modify_number_text)
      } else {
        return "" + (dice_total) + "[" + (dice_list.$join(", ")) + "]×[" + (break_list.$join(", ")) + "]" + (modify_number_text)
      };
    }, $OracleEngine_dice_result_r$11.$$arity = 3);
    
    Opal.def(self, '$result_r', $OracleEngine_result_r$12 = function $$result_r(dice_total, total) {
      var self = this;

      if ($truthy($rb_le(dice_total, self.fumble))) {
        return "ファンブル!"
      } else if ($truthy($rb_ge(dice_total, self.critical))) {
        return "クリティカル!"
      } else if (self.cmd.$cmp_op()['$=='](">=")) {
        if ($truthy($rb_ge(total, self.cmd.$target_number()))) {
          return "" + (total) + " 成功"
        } else {
          return "" + (total) + " 失敗"
        }
      } else {
        return total.$to_s()
      }
    }, $OracleEngine_result_r$12.$$arity = 2);
    
    Opal.def(self, '$normalize_critical', $OracleEngine_normalize_critical$13 = function $$normalize_critical(critical, string) {
      var self = this;

      
      if ($truthy(/@[+-]/.$match(string))) {
        critical = $rb_plus(12, critical)};
      if ($truthy($rb_lt(critical, 2))) {
        critical = 2};
      return critical;
    }, $OracleEngine_normalize_critical$13.$$arity = 2);
    
    Opal.def(self, '$normalize_fumble', $OracleEngine_normalize_fumble$14 = function $$normalize_fumble(fumble, string) {
      var self = this;

      
      if ($truthy(/#[+-]/.$match(string))) {
        fumble = $rb_plus(2, fumble)};
      return self.$clamp(fumble, 0, 12);
    }, $OracleEngine_normalize_fumble$14.$$arity = 2);
    
    Opal.def(self, '$damage_roll', $OracleEngine_damage_roll$15 = function $$damage_roll(string) {
      var $a, self = this, parser = nil, dice_list = nil, dice_broken = nil, total_n = nil, sequence = nil;

      
      parser = $$($nesting, 'CommandParser').$new(/\d+D6/i);
      self.cmd = parser.$parse(string);
      if ($truthy(($truthy($a = self.cmd['$nil?']()) ? $a : self.cmd.$cmp_op()['$nil?']()['$!']()))) {
        return nil};
      self.times = self.cmd.$command().$to_i();
      self["break"] = ($truthy($a = self.cmd.$dollar()) ? $a : 0).$abs();
      if (self.times['$=='](0)) {
        return nil};
      dice_list = self.$roll_(self.times, 6).$sort();
      dice_broken = dice_list.$pop(self["break"]);
      total_n = $rb_plus(dice_list.$inject(0, "+"), self.cmd.$modify_number());
      if ($truthy($rb_lt(total_n, 0))) {
        total_n = 0};
      sequence = [self.$expr_damage(), self.$result_damage(dice_list, dice_broken), total_n];
      return sequence.$join(" ＞ ");
    }, $OracleEngine_damage_roll$15.$$arity = 1);
    
    Opal.def(self, '$expr_damage', $OracleEngine_expr_damage$16 = function $$expr_damage() {
      var self = this, modify_number = nil, brak = nil;

      
      modify_number = self.$format_modifier(self.cmd.$modify_number());
      brak = (function() {if (self["break"]['$=='](0)) {
        return ""
      } else {
        return "" + "b[" + (self["break"]) + "]"
      }; return nil; })();
      return "" + "(" + (self.times) + "D6" + (modify_number) + (brak) + ")";
    }, $OracleEngine_expr_damage$16.$$arity = 0);
    return (Opal.def(self, '$result_damage', $OracleEngine_result_damage$17 = function $$result_damage(dice_list, break_list) {
      var self = this, dice_total = nil, modify_number_text = nil;

      
      dice_total = dice_list.$inject(0, "+");
      modify_number_text = self.$format_modifier(self.cmd.$modify_number());
      if ($truthy(break_list['$empty?']())) {
        return "" + (dice_total) + "[" + (dice_list.$join(", ")) + "]" + (modify_number_text)
      } else {
        return "" + (dice_total) + "[" + (dice_list.$join(", ")) + "]×[" + (break_list.$join(", ")) + "]" + (modify_number_text)
      };
    }, $OracleEngine_result_damage$17.$$arity = 2), nil) && 'result_damage';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting);
})(Opal);
