/* Generated by Opal 1.0.3 */
Opal.modules["utils/normalize"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$module_function', '$===', '$==', '$to_i']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Normalize');

    var $nesting = [self].concat($parent_nesting), $Normalize_comparison_operator$1, $Normalize_target_number$2;

    
    self.$module_function();
    
    Opal.def(self, '$comparison_operator', $Normalize_comparison_operator$1 = function $$comparison_operator(op) {
      var self = this, $case = nil;

      return (function() {$case = op;
      if (/<=|=</['$===']($case)) {return "<="}
      else if (/>=|=>/['$===']($case)) {return ">="}
      else if (/<>|!=|=!/['$===']($case)) {return "!="}
      else if (/</['$===']($case)) {return "<"}
      else if (/>/['$===']($case)) {return ">"}
      else if (/\=/['$===']($case)) {return "=="}
      else { return nil }})()
    }, $Normalize_comparison_operator$1.$$arity = 1);
    
    Opal.def(self, '$target_number', $Normalize_target_number$2 = function $$target_number(val) {
      var self = this;

      if (val['$==']("?")) {
        return val
      } else {
        return val.$to_i()
      }
    }, $Normalize_target_number$2.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/format"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$module_function', '$===', '$to_s', '$==', '$>']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Format');

    var $nesting = [self].concat($parent_nesting), $Format_comparison_operator$1, $Format_modifier$2;

    
    self.$module_function();
    
    Opal.def(self, '$comparison_operator', $Format_comparison_operator$1 = function $$comparison_operator(op) {
      var self = this, $case = nil;

      return (function() {$case = op;
      if ("=="['$===']($case)) {return "="}
      else if ("!="['$===']($case)) {return "<>"}
      else if ($$($nesting, 'Symbol')['$===']($case)) {return op.$to_s()}
      else { return nil }})()
    }, $Format_comparison_operator$1.$$arity = 1);
    
    Opal.def(self, '$modifier', $Format_modifier$2 = function $$modifier(number) {
      var self = this;

      if (number['$=='](0)) {
        return ""
      } else if ($truthy($rb_gt(number, 0))) {
        return "" + "+" + (number)
      } else {
        return number.$to_s()
      }
    }, $Format_modifier$2.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/ArithmeticEvaluator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$tokenize', '$expr', '$private', '$split', '$gsub', '$mul', '$loop', '$consume', '$+', '$-', '$unary', '$*', '$div', '$zero?', '$===', '$ceil', '$/', '$to_f', '$round', '$floor', '$-@', '$term', '$expect', '$expect_number', '$!=', '$[]', '$integer?', '$to_i', '$!', '$nil?', '$match']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ArithmeticEvaluator');

    var $nesting = [self].concat($parent_nesting), $ArithmeticEvaluator_eval$1, $ArithmeticEvaluator_tokenize$2, $ArithmeticEvaluator_add$4, $ArithmeticEvaluator_mul$6, $ArithmeticEvaluator_div$8, $ArithmeticEvaluator_unary$9, $ArithmeticEvaluator_term$10, $ArithmeticEvaluator_consume$11, $ArithmeticEvaluator_expect$12, $ArithmeticEvaluator_expect_number$13, $ArithmeticEvaluator_integer$ques$14;

    self.$$prototype.error = self.$$prototype.round_type = self.$$prototype.tokens = self.$$prototype.idx = nil;
    
    
    Opal.def(self, '$eval', $ArithmeticEvaluator_eval$1 = function(expr, round_type) {
      var self = this, ret = nil;

      
      
      if (round_type == null) {
        round_type = "omit";
      };
      self.tokens = self.$tokenize(expr);
      self.idx = 0;
      self.error = false;
      self.round_type = round_type;
      ret = self.$expr();
      if ($truthy(self.error)) {
        return 0
      } else {
        return ret
      };
    }, $ArithmeticEvaluator_eval$1.$$arity = -2);
    self.$private();
    
    Opal.def(self, '$tokenize', $ArithmeticEvaluator_tokenize$2 = function $$tokenize(expr) {
      var $$3, self = this;

      return $send(expr, 'gsub', [/[\(\)\+\-\*\/]/], ($$3 = function(e){var self = $$3.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return "" + " " + (e) + " ";}, $$3.$$s = self, $$3.$$arity = 1, $$3)).$split(" ")
    }, $ArithmeticEvaluator_tokenize$2.$$arity = 1);
    
    Opal.def(self, '$add', $ArithmeticEvaluator_add$4 = function $$add() {
      var $$5, self = this, ret = nil;

      
      ret = self.$mul();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$5 = function(){var self = $$5.$$s || this;

      if ($truthy(self.$consume("+"))) {
          return (ret = $rb_plus(ret, self.$mul()))
        } else if ($truthy(self.$consume("-"))) {
          return (ret = $rb_minus(ret, self.$mul()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$5.$$s = self, $$5.$$brk = $brk, $$5.$$arity = 0, $$5))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_add$4.$$arity = 0);
    Opal.alias(self, "expr", "add");
    
    Opal.def(self, '$mul', $ArithmeticEvaluator_mul$6 = function $$mul() {
      var $$7, self = this, ret = nil;

      
      ret = self.$unary();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$7 = function(){var self = $$7.$$s || this;

      if ($truthy(self.$consume("*"))) {
          return (ret = $rb_times(ret, self.$unary()))
        } else if ($truthy(self.$consume("/"))) {
          return (ret = self.$div(ret, self.$unary()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$7.$$s = self, $$7.$$brk = $brk, $$7.$$arity = 0, $$7))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_mul$6.$$arity = 0);
    
    Opal.def(self, '$div', $ArithmeticEvaluator_div$8 = function $$div(left, right) {
      var self = this, $case = nil;

      
      if ($truthy(right['$zero?']())) {
        
        self.error = true;
        return 0;};
      return (function() {$case = self.round_type;
      if ("roundUp"['$===']($case)) {return $rb_divide(left.$to_f(), right).$ceil()}
      else if ("roundOff"['$===']($case)) {return $rb_divide(left.$to_f(), right).$round()}
      else {return $rb_divide(left, right).$floor()}})();
    }, $ArithmeticEvaluator_div$8.$$arity = 2);
    
    Opal.def(self, '$unary', $ArithmeticEvaluator_unary$9 = function $$unary() {
      var self = this;

      if ($truthy(self.$consume("+"))) {
        return self.$unary()
      } else if ($truthy(self.$consume("-"))) {
        return self.$unary()['$-@']()
      } else {
        return self.$term()
      }
    }, $ArithmeticEvaluator_unary$9.$$arity = 0);
    
    Opal.def(self, '$term', $ArithmeticEvaluator_term$10 = function $$term() {
      var self = this, ret = nil;

      if ($truthy(self.$consume("("))) {
        
        ret = self.$expr();
        self.$expect(")");
        return ret;
      } else {
        return self.$expect_number()
      }
    }, $ArithmeticEvaluator_term$10.$$arity = 0);
    
    Opal.def(self, '$consume', $ArithmeticEvaluator_consume$11 = function $$consume(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        return false};
      self.idx = $rb_plus(self.idx, 1);
      return true;
    }, $ArithmeticEvaluator_consume$11.$$arity = 1);
    
    Opal.def(self, '$expect', $ArithmeticEvaluator_expect$12 = function $$expect(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        self.error = true};
      return (self.idx = $rb_plus(self.idx, 1));
    }, $ArithmeticEvaluator_expect$12.$$arity = 1);
    
    Opal.def(self, '$expect_number', $ArithmeticEvaluator_expect_number$13 = function $$expect_number() {
      var self = this, ret = nil;

      
      if ($truthy(self['$integer?'](self.tokens['$[]'](self.idx)))) {
      } else {
        
        self.error = true;
        self.idx = $rb_plus(self.idx, 1);
        return 0;
      };
      ret = self.tokens['$[]'](self.idx).$to_i();
      self.idx = $rb_plus(self.idx, 1);
      return ret;
    }, $ArithmeticEvaluator_expect_number$13.$$arity = 0);
    return (Opal.def(self, '$integer?', $ArithmeticEvaluator_integer$ques$14 = function(str) {
      var self = this;

      return /^\d+$/.$match(str)['$nil?']()['$!']()
    }, $ArithmeticEvaluator_integer$ques$14.$$arity = 1), nil) && 'integer?';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/modifier_formatter"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$>', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ModifierFormatter');

    var $nesting = [self].concat($parent_nesting), $ModifierFormatter_format_modifier$1;

    
    Opal.def(self, '$format_modifier', $ModifierFormatter_format_modifier$1 = function $$format_modifier(modifier) {
      var self = this;

      if (modifier['$=='](0)) {
        return ""
      } else if ($truthy($rb_gt(modifier, 0))) {
        return "" + "+" + (modifier)
      } else {
        return modifier.$to_s()
      }
    }, $ModifierFormatter_format_modifier$1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/command_parser"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$attr_accessor', '$include', '$format_modifier', '$===', '$join', '$tokenize', '$new', '$lhs', '$take_cmp_op', '$cmp_op=', '$-', '$cmp_op', '$expr', '$target_number=', '$<', '$size', '$private', '$split', '$gsub', '$take', '$literal?', '$command_suffix', '$loop', '$consume', '$+', '$mul', '$command=', '$modify_number=', '$critical', '$unary', '$critical=', '$fumble', '$fumble=', '$dollar', '$dollar=', '$each', '$==', '$=~', '$[]', '$comparison_operator']);
  
  self.$require("utils/ArithmeticEvaluator");
  self.$require("utils/normalize");
  self.$require("utils/modifier_formatter");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CommandParser');

    var $nesting = [self].concat($parent_nesting), $CommandParser_initialize$1, $CommandParser_parse$4, $CommandParser_tokenize$5, $CommandParser_lhs$7, $CommandParser_command_suffix$9, $CommandParser_literal$ques$11, $CommandParser_take$13, $CommandParser_take_cmp_op$14;

    self.$$prototype.error = self.$$prototype.parsed = self.$$prototype.idx = self.$$prototype.tokens = self.$$prototype.literals = nil;
    
    
    Opal.def(self, '$initialize', $CommandParser_initialize$1 = function $$initialize($a) {
      var $post_args, literals, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      literals = $post_args;;
      self.literals = literals;
      return (self.round_type = "omit");
    }, $CommandParser_initialize$1.$$arity = -1);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parsed');

      var $nesting = [self].concat($parent_nesting), $Parsed_initialize$2, $Parsed_to_s$3;

      self.$$prototype.critical = self.$$prototype.fumble = self.$$prototype.dollar = self.$$prototype.modify_number = self.$$prototype.command = self.$$prototype.cmp_op = self.$$prototype.target_number = nil;
      
      self.$attr_accessor("command", "critical", "fumble", "dollar", "modify_number", "cmp_op", "target_number");
      self.$include($$($nesting, 'ModifierFormatter'));
      
      Opal.def(self, '$initialize', $Parsed_initialize$2 = function $$initialize() {
        var self = this;

        
        self.critical = nil;
        self.fumble = nil;
        return (self.dollar = nil);
      }, $Parsed_initialize$2.$$arity = 0);
      return (Opal.def(self, '$to_s', $Parsed_to_s$3 = function $$to_s(suffix_position) {
        var self = this, c = nil, f = nil, d = nil, m = nil, $case = nil;

        
        
        if (suffix_position == null) {
          suffix_position = "after_command";
        };
        c = (function() {if ($truthy(self.critical)) {
          return "" + "@" + (self.critical)
        } else {
          return nil
        }; return nil; })();
        f = (function() {if ($truthy(self.fumble)) {
          return "" + "#" + (self.fumble)
        } else {
          return nil
        }; return nil; })();
        d = (function() {if ($truthy(self.dollar)) {
          return "" + "$" + (self.dollar)
        } else {
          return nil
        }; return nil; })();
        m = self.$format_modifier(self.modify_number);
        return (function() {$case = suffix_position;
        if ("after_command"['$===']($case)) {return [self.command, c, f, d, m, self.cmp_op, self.target_number].$join()}
        else if ("after_modify_number"['$===']($case)) {return [self.command, m, c, f, d, self.cmp_op, self.target_number].$join()}
        else if ("after_target_number"['$===']($case)) {return [self.command, m, self.cmp_op, self.target_number, c, f, d].$join()}
        else { return nil }})();
      }, $Parsed_to_s$3.$$arity = -1), nil) && 'to_s';
    })($nesting[0], null, $nesting);
    
    Opal.def(self, '$parse', $CommandParser_parse$4 = function $$parse(expr, round_type) {
      var $a, self = this, $writer = nil;

      
      
      if (round_type == null) {
        round_type = "omit";
      };
      self.tokens = self.$tokenize(expr);
      self.idx = 0;
      self.error = false;
      self.round_type = round_type;
      self.parsed = $$($nesting, 'Parsed').$new();
      self.$lhs();
      if ($truthy(self.error)) {
        return nil};
      
      $writer = [self.$take_cmp_op()];
      $send(self.parsed, 'cmp_op=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [(function() {if ($truthy(self.parsed.$cmp_op())) {
        return self.$expr()
      } else {
        return nil
      }; return nil; })()];
      $send(self.parsed, 'target_number=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      if ($truthy(($truthy($a = $rb_lt(self.idx, self.tokens.$size())) ? $a : self.error))) {
        return nil};
      return self.parsed;
    }, $CommandParser_parse$4.$$arity = -2);
    self.$private();
    
    Opal.def(self, '$tokenize', $CommandParser_tokenize$5 = function $$tokenize(expr) {
      var $$6, self = this;

      return $send(expr, 'gsub', [/[\(\)\+\-*\/@#\$]|[<>!=]+/], ($$6 = function(e){var self = $$6.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return "" + " " + (e) + " ";}, $$6.$$s = self, $$6.$$arity = 1, $$6)).$split(" ")
    }, $CommandParser_tokenize$5.$$arity = 1);
    
    Opal.def(self, '$lhs', $CommandParser_lhs$7 = function $$lhs() {
      var $$8, self = this, command = nil, ret = nil, $writer = nil;

      
      command = self.$take();
      if ($truthy(self['$literal?'](command))) {
      } else {
        
        self.error = true;
        return nil;
      };
      self.$command_suffix();
      ret = 0;
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$8 = function(){var self = $$8.$$s || this;

      if ($truthy(self.$consume("+"))) {
          return (ret = $rb_plus(ret, self.$mul()))
        } else if ($truthy(self.$consume("-"))) {
          return (ret = $rb_minus(ret, self.$mul()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$8.$$s = self, $$8.$$brk = $brk, $$8.$$arity = 0, $$8))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      self.$command_suffix();
      
      $writer = [command];
      $send(self.parsed, 'command=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [ret];
      $send(self.parsed, 'modify_number=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;
    }, $CommandParser_lhs$7.$$arity = 0);
    
    Opal.def(self, '$command_suffix', $CommandParser_command_suffix$9 = function $$command_suffix() {
      var $$10, self = this;

      return (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$10 = function(){var self = $$10.$$s || this, $writer = nil;
        if (self.parsed == null) self.parsed = nil;

      if ($truthy(self.$consume("@"))) {
          
          if ($truthy(self.parsed.$critical())) {
            self.error = true};
          
          $writer = [self.$unary()];
          $send(self.parsed, 'critical=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        } else if ($truthy(self.$consume("#"))) {
          
          if ($truthy(self.parsed.$fumble())) {
            self.error = true};
          
          $writer = [self.$unary()];
          $send(self.parsed, 'fumble=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        } else if ($truthy(self.$consume("$"))) {
          
          if ($truthy(self.parsed.$dollar())) {
            self.error = true};
          
          $writer = [self.$unary()];
          $send(self.parsed, 'dollar=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$10.$$s = self, $$10.$$brk = $brk, $$10.$$arity = 0, $$10))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()
    }, $CommandParser_command_suffix$9.$$arity = 0);
    
    Opal.def(self, '$literal?', $CommandParser_literal$ques$11 = function(command) {try {

      var $$12, self = this;

      
      $send(self.literals, 'each', [], ($$12 = function(lit){var self = $$12.$$s || this, $case = nil;

      
        
        if (lit == null) {
          lit = nil;
        };
        return (function() {$case = lit;
        if ($$($nesting, 'String')['$===']($case)) {if (command['$=='](lit)) {
          Opal.ret(true)
        } else {
          return nil
        }}
        else if ($$($nesting, 'Regexp')['$===']($case)) {if ($truthy(command['$=~'](lit))) {
          Opal.ret(true)
        } else {
          return nil
        }}
        else { return nil }})();}, $$12.$$s = self, $$12.$$arity = 1, $$12));
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $CommandParser_literal$ques$11.$$arity = 1);
    
    Opal.def(self, '$take', $CommandParser_take$13 = function $$take() {
      var self = this, ret = nil;

      
      ret = self.tokens['$[]'](self.idx);
      self.idx = $rb_plus(self.idx, 1);
      return ret;
    }, $CommandParser_take$13.$$arity = 0);
    return (Opal.def(self, '$take_cmp_op', $CommandParser_take_cmp_op$14 = function $$take_cmp_op() {
      var self = this;

      return $$($nesting, 'Normalize').$comparison_operator(self.$take())
    }, $CommandParser_take_cmp_op$14.$$arity = 0), nil) && 'take_cmp_op';
  })($nesting[0], $$($nesting, 'ArithmeticEvaluator'), $nesting);
};

/* Generated by Opal 1.0.3 */
Opal.modules["diceBot/NightWizard"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$setPrefixes', '$parse_nw', '$parse_2r6', '$roll_nw', '$cmp_op', '$send', '$target_number', '$compact', '$to_s', '$join', '$private', '$attr_accessor', '$+', '$zero?', '$modifier', '$match', '$new', '$to_i', '$[]', '$base=', '$-', '$eval', '$modify_number=', '$map', '$split', '$to_proc', '$critical_numbers=', '$fumble_numbers=', '$prana=', '$active_modify_number=', '$comparison_operator', '$cmp_op=', '$target_number=', '$passive_modify_number=', '$critical_numbers', '$fumble_numbers', '$roll_once_first', '$==', '$roll_once', '$!=', '$prana', '$roll', '$fumble_base_number', '$passive_modify_number', '$active_modify_number', '$include?']);
  
  self.$require("utils/normalize");
  self.$require("utils/format");
  self.$require("utils/command_parser");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NightWizard');

    var $nesting = [self].concat($parent_nesting), $NightWizard_initialize$1, $NightWizard_rollDiceCommand$2, $NightWizard_parse_nw$7, $NightWizard_parse_2r6$8, $NightWizard_roll_nw$9, $NightWizard_roll_once$10, $NightWizard_roll_once_first$11, $NightWizard_fumble_base_number$12;

    self.$$prototype.nw_command = self.$$prototype.total = self.$$prototype.interim_expr = self.$$prototype.status = self.$$prototype.fumble_numbers = self.$$prototype.critical_numbers = nil;
    
    Opal.const_set($nesting[0], 'ID', "NightWizard");
    Opal.const_set($nesting[0], 'NAME', "ナイトウィザード The 2nd Edition");
    Opal.const_set($nesting[0], 'SORT_KEY', "ないとういさあと2");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定用コマンド　(aNW+b@x#y$z+c)\n" + "　　a : 基本値\n" + "　　b : 常時に準じる特技による補正\n" + "　　c : 常時以外の特技、および支援効果による補正（ファンブル時には適用されない）\n" + "　　x : クリティカル値のカンマ区切り（省略時 10）\n" + "　　y : ファンブル値のカンマ区切り（省略時 5）\n" + "　　z : プラーナによる達成値補正のプラーナ消費数（ファンブル時には適用されない）\n" + "　クリティカル値、ファンブル値が無い場合は1や13などのあり得ない数値を入れてください。\n" + "　例）12NW-5@7#2$3 1NW 50nw+5@7,10#2,5 50nw-5+10@7,10#2,5+15+25\n");
    self.$setPrefixes(["([-+]?\\d+)?NW.*", "2R6.*"]);
    
    Opal.def(self, '$initialize', $NightWizard_initialize$1 = function $$initialize() {
      var $iter = $NightWizard_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $NightWizard_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $NightWizard_initialize$1, false), $zuper, $iter);
      self.sendMode = 2;
      return (self.nw_command = "NW");
    }, $NightWizard_initialize$1.$$arity = 0);
    
    Opal.def(self, '$rollDiceCommand', $NightWizard_rollDiceCommand$2 = function $$rollDiceCommand(string) {
      var $a, $b, self = this, cmd = nil, total = nil, interim_expr = nil, status = nil, result = nil, sequence = nil;

      
      cmd = ($truthy($a = self.$parse_nw(string)) ? $a : self.$parse_2r6(string));
      if ($truthy(cmd)) {
      } else {
        return nil
      };
      $b = self.$roll_nw(cmd), $a = Opal.to_ary($b), (total = ($a[0] == null ? nil : $a[0])), (interim_expr = ($a[1] == null ? nil : $a[1])), (status = ($a[2] == null ? nil : $a[2])), $b;
      result = (function() {if ($truthy(cmd.$cmp_op())) {
        if ($truthy(total.$send(cmd.$cmp_op(), cmd.$target_number()))) {
          return "成功"
        } else {
          return "失敗"
        }
      } else {
        return nil
      }; return nil; })();
      sequence = ["" + "(" + (cmd) + ")", interim_expr, status, total.$to_s(), result].$compact();
      return sequence.$join(" ＞ ");
    }, $NightWizard_rollDiceCommand$2.$$arity = 1);
    self.$private();
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parsed');

      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("critical_numbers");
      self.$attr_accessor("fumble_numbers");
      self.$attr_accessor("prana");
      self.$attr_accessor("active_modify_number");
      self.$attr_accessor("cmp_op");
      return self.$attr_accessor("target_number");
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParsedNW');

      var $nesting = [self].concat($parent_nesting), $ParsedNW_initialize$3, $ParsedNW_passive_modify_number$4, $ParsedNW_to_s$5;

      self.$$prototype.base = self.$$prototype.modify_number = self.$$prototype.active_modify_number = self.$$prototype.prana = self.$$prototype.command = self.$$prototype.critical_numbers = self.$$prototype.fumble_numbers = self.$$prototype.cmp_op = self.$$prototype.target_number = nil;
      
      self.$attr_accessor("base");
      self.$attr_accessor("modify_number");
      
      Opal.def(self, '$initialize', $ParsedNW_initialize$3 = function $$initialize(command) {
        var self = this;

        return (self.command = command)
      }, $ParsedNW_initialize$3.$$arity = 1);
      
      Opal.def(self, '$passive_modify_number', $ParsedNW_passive_modify_number$4 = function $$passive_modify_number() {
        var self = this;

        return $rb_plus(self.base, self.modify_number)
      }, $ParsedNW_passive_modify_number$4.$$arity = 0);
      return (Opal.def(self, '$to_s', $ParsedNW_to_s$5 = function $$to_s() {
        var $a, self = this, base = nil, modify_number = nil, active_modify_number = nil, dollar = nil;

        
        base = (function() {if ($truthy(self.base['$zero?']())) {
          return nil
        } else {
          return self.base
        }; return nil; })();
        modify_number = $$($nesting, 'Format').$modifier(self.modify_number);
        active_modify_number = $$($nesting, 'Format').$modifier(self.active_modify_number);
        dollar = ($truthy($a = self.prana) ? "" + "$" + (self.prana) : $a);
        return "" + (base) + (self.command) + (modify_number) + "@" + (self.critical_numbers.$join(",")) + "#" + (self.fumble_numbers.$join(",")) + (dollar) + (active_modify_number) + (self.cmp_op) + (self.target_number);
      }, $ParsedNW_to_s$5.$$arity = 0), nil) && 'to_s';
    })($nesting[0], $$($nesting, 'Parsed'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parsed2R6');

      var $nesting = [self].concat($parent_nesting), $Parsed2R6_to_s$6;

      self.$$prototype.passive_modify_number = self.$$prototype.active_modify_number = self.$$prototype.critical_numbers = self.$$prototype.fumble_numbers = self.$$prototype.cmp_op = self.$$prototype.target_number = nil;
      
      self.$attr_accessor("passive_modify_number");
      return (Opal.def(self, '$to_s', $Parsed2R6_to_s$6 = function $$to_s() {
        var self = this;

        return "" + "2R6M[" + (self.passive_modify_number) + "," + (self.active_modify_number) + "]C[" + (self.critical_numbers.$join(",")) + "]F[" + (self.fumble_numbers.$join(",")) + "]" + (self.cmp_op) + (self.target_number)
      }, $Parsed2R6_to_s$6.$$arity = 0), nil) && 'to_s';
    })($nesting[0], $$($nesting, 'Parsed'), $nesting);
    
    Opal.def(self, '$parse_nw', $NightWizard_parse_nw$7 = function $$parse_nw(string) {
      var $a, self = this, m = nil, ae = nil, command = nil, $writer = nil;

      
      m = new RegExp("" + "^([-+]?\\d+)?" + (self.nw_command) + "((?:[-+]\\d+)+)?(?:@(\\d+(?:,\\d+)*))?(?:#(\\d+(?:,\\d+)*))?(?:\\$(\\d+(?:,\\d+)*))?((?:[-+]\\d+)+)?(?:([>=]+)(\\d+))?$").$match(string);
      if ($truthy(m)) {
      } else {
        return nil
      };
      ae = $$($nesting, 'ArithmeticEvaluator').$new();
      command = $$($nesting, 'ParsedNW').$new(self.nw_command);
      
      $writer = [m['$[]'](1).$to_i()];
      $send(command, 'base=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [(function() {if ($truthy(m['$[]'](2))) {
        return ae.$eval(m['$[]'](2))
      } else {
        return 0
      }; return nil; })()];
      $send(command, 'modify_number=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [(function() {if ($truthy(m['$[]'](3))) {
        return $send(m['$[]'](3).$split(","), 'map', [], "to_i".$to_proc())
      } else {
        return [10]
      }; return nil; })()];
      $send(command, 'critical_numbers=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [(function() {if ($truthy(m['$[]'](4))) {
        return $send(m['$[]'](4).$split(","), 'map', [], "to_i".$to_proc())
      } else {
        return [5]
      }; return nil; })()];
      $send(command, 'fumble_numbers=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [($truthy($a = m['$[]'](5)) ? m['$[]'](5).$to_i() : $a)];
      $send(command, 'prana=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [(function() {if ($truthy(m['$[]'](6))) {
        return ae.$eval(m['$[]'](6))
      } else {
        return 0
      }; return nil; })()];
      $send(command, 'active_modify_number=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [$$($nesting, 'Normalize').$comparison_operator(m['$[]'](7))];
      $send(command, 'cmp_op=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [($truthy($a = m['$[]'](8)) ? m['$[]'](8).$to_i() : $a)];
      $send(command, 'target_number=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return command;
    }, $NightWizard_parse_nw$7.$$arity = 1);
    
    Opal.def(self, '$parse_2r6', $NightWizard_parse_2r6$8 = function $$parse_2r6(string) {
      var $a, self = this, m = nil, ae = nil, command = nil, $writer = nil;

      
      m = /^2R6m\[([-+]?\d+(?:[-+]\d+)*)(?:,([-+]?\d+(?:[-+]\d+)*))?\](?:c\[(\d+(?:,\d+)*)\])?(?:f\[(\d+(?:,\d+)*)\])?(?:([>=]+)(\d+))?/i.$match(string);
      if ($truthy(m)) {
      } else {
        return nil
      };
      ae = $$($nesting, 'ArithmeticEvaluator').$new();
      command = $$($nesting, 'Parsed2R6').$new();
      
      $writer = [ae.$eval(m['$[]'](1))];
      $send(command, 'passive_modify_number=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [(function() {if ($truthy(m['$[]'](2))) {
        return ae.$eval(m['$[]'](2))
      } else {
        return 0
      }; return nil; })()];
      $send(command, 'active_modify_number=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [(function() {if ($truthy(m['$[]'](3))) {
        return $send(m['$[]'](3).$split(","), 'map', [], "to_i".$to_proc())
      } else {
        return [10]
      }; return nil; })()];
      $send(command, 'critical_numbers=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [(function() {if ($truthy(m['$[]'](4))) {
        return $send(m['$[]'](4).$split(","), 'map', [], "to_i".$to_proc())
      } else {
        return [5]
      }; return nil; })()];
      $send(command, 'fumble_numbers=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [$$($nesting, 'Normalize').$comparison_operator(m['$[]'](5))];
      $send(command, 'cmp_op=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [($truthy($a = m['$[]'](6)) ? m['$[]'](6).$to_i() : $a)];
      $send(command, 'target_number=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return command;
    }, $NightWizard_parse_2r6$8.$$arity = 1);
    
    Opal.def(self, '$roll_nw', $NightWizard_roll_nw$9 = function $$roll_nw(parsed) {
      var $a, $b, self = this, status = nil, prana_bonus = nil, prana_list = nil, base = nil;

      
      self.critical_numbers = parsed.$critical_numbers();
      self.fumble_numbers = parsed.$fumble_numbers();
      self.total = 0;
      self.interim_expr = "";
      self.status = nil;
      status = self.$roll_once_first();
      while (status['$==']("critical")) {
        status = self.$roll_once()
      };
      if ($truthy(($truthy($a = status['$!=']("fumble")) ? parsed.$prana() : $a))) {
        
        $b = self.$roll(parsed.$prana(), 6), $a = Opal.to_ary($b), (prana_bonus = ($a[0] == null ? nil : $a[0])), (prana_list = ($a[1] == null ? nil : $a[1])), $b;
        self.total = $rb_plus(self.total, prana_bonus);
        self.interim_expr = $rb_plus(self.interim_expr, "" + "+" + (prana_bonus) + "[" + (prana_list) + "]");};
      base = (function() {if (status['$==']("fumble")) {
        return self.$fumble_base_number(parsed)
      } else {
        return $rb_plus(parsed.$passive_modify_number(), parsed.$active_modify_number())
      }; return nil; })();
      self.total = $rb_plus(self.total, base);
      self.interim_expr = $rb_plus(base.$to_s(), self.interim_expr);
      return [self.total, self.interim_expr, self.status];
    }, $NightWizard_roll_nw$9.$$arity = 1);
    
    Opal.def(self, '$roll_once', $NightWizard_roll_once$10 = function $$roll_once(fumbleable) {
      var $a, $b, self = this, dice_value = nil, dice_str = nil;

      
      
      if (fumbleable == null) {
        fumbleable = false;
      };
      $b = self.$roll(2, 6), $a = Opal.to_ary($b), (dice_value = ($a[0] == null ? nil : $a[0])), (dice_str = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(($truthy($a = fumbleable) ? self.fumble_numbers['$include?'](dice_value) : $a))) {
        
        self.total = $rb_minus(self.total, 10);
        self.interim_expr = $rb_plus(self.interim_expr, "" + "-10[" + (dice_str) + "]");
        self.status = "ファンブル";
        return "fumble";
      } else if ($truthy(self.critical_numbers['$include?'](dice_value))) {
        
        self.total = $rb_plus(self.total, 10);
        self.interim_expr = $rb_plus(self.interim_expr, "" + "+10[" + (dice_str) + "]");
        self.status = "クリティカル";
        return "critical";
      } else {
        
        self.total = $rb_plus(self.total, dice_value);
        self.interim_expr = $rb_plus(self.interim_expr, "" + "+" + (dice_value) + "[" + (dice_str) + "]");
        return nil;
      };
    }, $NightWizard_roll_once$10.$$arity = -1);
    
    Opal.def(self, '$roll_once_first', $NightWizard_roll_once_first$11 = function $$roll_once_first() {
      var self = this;

      return self.$roll_once(true)
    }, $NightWizard_roll_once_first$11.$$arity = 0);
    return (Opal.def(self, '$fumble_base_number', $NightWizard_fumble_base_number$12 = function $$fumble_base_number(parsed) {
      var self = this;

      return parsed.$passive_modify_number()
    }, $NightWizard_fumble_base_number$12.$$arity = 1), nil) && 'fumble_base_number';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting);
};

/* Generated by Opal 1.0.3 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$setPrefixes']);
  
  self.$require("diceBot/NightWizard");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SevenFortressMobius');

    var $nesting = [self].concat($parent_nesting), $SevenFortressMobius_initialize$1;

    
    Opal.const_set($nesting[0], 'ID', "SevenFortressMobius");
    Opal.const_set($nesting[0], 'NAME', "セブン＝フォートレス メビウス");
    Opal.const_set($nesting[0], 'SORT_KEY', "せふんふおおとれすめひうす");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定用コマンド　(nSFM+m@x#y)\n" + "　\"(基本値)SFM(常時および常時に準じる特技等及び状態異常（省略可）)@(クリティカル値)#(ファンブル値)（常時以外の特技等及び味方の支援効果等の影響（省略可））\"でロールします。\n" + "　Rコマンド(2R6m[n,m]c[x]f[y]>=t tは目標値)に読替されます。\n" + "　クリティカル値、ファンブル値が無い場合は1や13などのあり得ない数値を入れてください。\n" + "　例）12SFM-5@7#2　　1SFM　　50SFM+5@7,10#2,5　50SFM-5+10@7,10#2,5+15+25\n");
    self.$setPrefixes(["([-+]?\\d+)?SFM.*", "2R6.*"]);
    return (Opal.def(self, '$initialize', $SevenFortressMobius_initialize$1 = function $$initialize() {
      var $iter = $SevenFortressMobius_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $SevenFortressMobius_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $SevenFortressMobius_initialize$1, false), $zuper, $iter);
      return (self.nw_command = "SFM");
    }, $SevenFortressMobius_initialize$1.$$arity = 0), nil) && 'initialize';
  })($nesting[0], $$($nesting, 'NightWizard'), $nesting);
})(Opal);
